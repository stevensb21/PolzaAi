import os
import json
import asyncio
import logging
import urllib.parse
from telebot import TeleBot
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
import requests
from dotenv import load_dotenv

from validate import makeOrderformat, validateOrder
from api import search_employees, addPeople, UpdatePeople
from notification_types import NotificationType
from notification_storage import NotificationStorage
from notification_scheduler import NotificationScheduler
from generateDocx import create_tetracom_document
from ceo_dispatcher import ceo_dispatcher, handle_search_request

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = AsyncTeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_chat_histories = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_photos = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_storage = NotificationStorage()
notification_scheduler = None

async def process_order(user_id: int, message_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_history = user_chat_histories.get(user_id, [])
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        validation_result = await validateOrder(message_text, chat_history)
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        try:
            if isinstance(validation_result, str):
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                json_str = validation_result.strip()
                if json_str.startswith('```json'):
                    json_str = json_str[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if json_str.endswith('```'):
                    json_str = json_str[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                json_str = json_str.strip()
                
                order_data = json.loads(json_str)
            else:
                order_data = validation_result
        except json.JSONDecodeError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}\nüìã –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {validation_result}"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
        if order_data.get("error") == "missing_data":
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            chat_history.append({"role": "user", "content": message_text})
            user_chat_histories[user_id] = chat_history
            return f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {order_data.get('message')}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "user", "content": message_text})
        chat_history.append({"role": "assistant", "content": str(order_data)})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        order_json = await makeOrderformat(message_text, chat_history)
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç makeOrderformat
        try:
            if isinstance(order_json, str):
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                json_str = order_json.strip()
                if json_str.startswith('```json'):
                    json_str = json_str[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if json_str.endswith('```'):
                    json_str = json_str[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                json_str = json_str.strip()
                
                order_data = json.loads(json_str)
            else:
                order_data = order_json
        except json.JSONDecodeError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∑–∞–∫–∞–∑–∞: {e}\nüìã –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {order_json}"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing_employee = await search_employees(order_data.get("full_name"))
        
        if existing_employee and isinstance(existing_employee, dict):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            order_data["id"] = existing_employee.get("id")
            result = await UpdatePeople(order_data)
            
            if result and result.get("success"):
                data = result.get("data", {})
                full_name = data.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                position = data.get("position", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
                status = data.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                employee_id = data.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                
                # –ö–æ–¥–∏—Ä—É–µ–º –§–ò–û –¥–ª—è URL
                encoded_name = urllib.parse.quote(full_name)
                search_url = f"http://labor.tetrakom-crm-miniapp.ru/safety?search_fio={encoded_name}&search_position=&search_phone=&search_status=&certificate_id=&certificate_status="
                
                response_text = f"""
‚úÖ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

üë§ <b>–§–ò–û:</b> {full_name}
üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}
üìÑ <b>–°–ù–ò–õ–°:</b> {data.get("snils", "–ù–µ —É–∫–∞–∑–∞–Ω")}
üî¢ <b>–ò–ù–ù:</b> {data.get("inn", "–ù–µ —É–∫–∞–∑–∞–Ω")}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
üÜî <b>ID:</b> {employee_id}
"""
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
                response_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {error_msg}"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            result = await addPeople(order_data)
            
            if result and result.get("success"):
                data = result.get("data", {})
                full_name = data.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                position = data.get("position", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
                status = data.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                employee_id = data.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                
                # –ö–æ–¥–∏—Ä—É–µ–º –§–ò–û –¥–ª—è URL
                encoded_name = urllib.parse.quote(full_name)
                search_url = f"http://labor.tetrakom-crm-miniapp.ru/safety?search_fio={encoded_name}&search_position=&search_phone=&search_status=&certificate_id=&certificate_status="
                
                response_text = f"""
üéâ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üë§ <b>–§–ò–û:</b> {full_name}
üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}
üìÑ <b>–°–ù–ò–õ–°:</b> {data.get("snils", "–ù–µ —É–∫–∞–∑–∞–Ω")}
üî¢ <b>–ò–ù–ù:</b> {data.get("inn", "–ù–µ —É–∫–∞–∑–∞–Ω")}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
üÜî <b>ID:</b> {employee_id}
"""
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
                response_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {error_msg}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "assistant", "content": str(result)})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if result and result.get("success"):
            data = result.get("data", {})
            employee_id = data.get("id")
            full_name = data.get("full_name", "")
            
            # –ö–æ–¥–∏—Ä—É–µ–º –§–ò–û –¥–ª—è URL
            encoded_name = urllib.parse.quote(full_name)
            search_url = f"http://labor.tetrakom-crm-miniapp.ru/safety?search_fio={encoded_name}&search_position=&search_phone=&search_status=&certificate_id=&certificate_status="
            
            notification_data = {
                "full_name": full_name,
                "position": data.get("position", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
                "snils": data.get("snils", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "inn": data.get("inn", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "phone": data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "birth_date": data.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
                "status": data.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "employee_id": employee_id,
                "search_url": search_url
            }
            
            if result.get("message") == "–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω":
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DOCX —Ñ–∞–π–ª
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    order_data = {
                        'employee': {
                            'full_name': data.get("full_name", ""),
                            'position': data.get("position", ""),
                            'snils': data.get("snils", ""),
                            'inn': data.get("inn", ""),
                            'phone': data.get("phone", ""),
                            'birth_date': data.get("birth_date", ""),
                            'photo': ''  # –§–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è DOCX
                        }
                    }
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DOCX —Ñ–∞–π–ª
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è DOCX: {order_data}")
                    docx_filename = create_tetracom_document(order_data)
                    logger.info(f"DOCX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {docx_filename}")
                    logger.info(f"–¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {type(docx_filename)}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX —Ñ–∞–π–ª–∞: {e}")
                    docx_filename = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                if notification_scheduler:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    subscribers = notification_storage.get_subscribers(NotificationType.EMPLOYEE_REGISTERED)
                    logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ EMPLOYEE_REGISTERED: {subscribers}")
                    logger.info(f"–ü–µ—Ä–µ–¥–∞–µ–º source_user_id: {user_id}")
                    if subscribers:
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_photo = user_photos.get(user_id)
                        logger.info(f"–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_photo}")
                        await notification_scheduler.send_immediate_notification_with_photo_and_docx(
                            NotificationType.EMPLOYEE_REGISTERED,
                            notification_data,
                            subscribers,
                            user_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                            user_photo,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
                            docx_filename  # –ü–µ—Ä–µ–¥–∞–µ–º DOCX —Ñ–∞–π–ª
                        )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                if notification_scheduler:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    subscribers = notification_storage.get_subscribers(NotificationType.EMPLOYEE_UPDATED)
                    if subscribers:
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_photo = user_photos.get(user_id)
                        logger.info(f"–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_photo}")
                        await notification_scheduler.send_immediate_notification_with_photo(
                            NotificationType.EMPLOYEE_UPDATED,
                            notification_data,
                            subscribers,
                            user_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                            user_photo  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
                        )
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_chat_histories[user_id] = []
        
        return response_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}"

@bot.message_handler(commands=['start'])
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!

üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ –§–ò–û
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å  
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –°–ù–ò–õ–°
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ò–ù–ù (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç—è–º–∏ - –±–æ—Ç —Å–æ–±–µ—Ä–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –∑–∞–∫–∞–∑.

üîç –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
    await bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['help'])
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìã –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

ü§ñ <b>–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç 2 —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:</b>

üìã <b>1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b>
‚Ä¢ "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫, –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É"
‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞—è–≤–∫—É –¥–ª—è –ü–µ—Ç—Ä–æ–≤–∞ –Ω–∞ –ü–ë–û"
‚Ä¢ "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä, +7-999-123-45-67, –°–ù–ò–õ–° 123-456-789, –æ–±—É—á–∏—Ç—å –Ω–∞ –ª–µ—Å–∞"

üîç <b>2. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:</b>
‚Ä¢ "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–µ—Ç—Ä–æ–≤–µ"
‚Ä¢ "–ù–∞–π–¥–∏ –°–∏–¥–æ—Ä–æ–≤–∞"

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫:</b>
‚Ä¢ "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ú–µ–Ω–µ–¥–∂–µ—Ä, +7-999-123-45-67"
‚Ä¢ "–°–ù–ò–õ–°: 123-456-789 01, –î–∞—Ç–∞: 01.01.1990"
‚Ä¢ "–ò–ù–ù: 1234567890"

üîç <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å  
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
    await bot.reply_to(message, help_text, parse_mode='HTML')

@bot.message_handler(commands=['clear'])
async def clear_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
    user_id = message.from_user.id
    user_chat_histories[user_id] = []
    await bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")

@bot.message_handler(commands=['notifications'])
async def notifications_command(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    user_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptions = notification_storage.get_user_subscriptions(user_id)
    
    if not subscriptions:
        response = """
üîï <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>

–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
"""
    else:
        response = f"""
üîî <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>

"""
        for sub in subscriptions:
            response += f"‚Ä¢ {sub}\n"
        
        response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
    
    await bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['subscribe'])
async def subscribe_command(message: Message):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = str(message.from_user.id)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_types = [
        NotificationType.EMPLOYEE_REGISTERED,
        NotificationType.EMPLOYEE_UPDATED,
        NotificationType.CERTIFICATE_EXPIRING,
        NotificationType.CERTIFICATE_EXPIRED
    ]
    
    notification_storage.subscribe_user(user_id, notification_types)
    
    response = """
‚úÖ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.
"""
    await bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['unsubscribe'])
async def unsubscribe_command(message: Message):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = str(message.from_user.id)
    
    notification_storage.unsubscribe_user(user_id)
    
    response = """
‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
"""
    await bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['stats'])
async def stats_command(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    stats = notification_storage.get_notification_stats(24)
    
    response = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞ 24 —á–∞—Å–∞)</b>

üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {stats['total_sent']}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {stats['successful']}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {stats['failed']}
üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {stats['success_rate']:.1f}%

üîî <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
"""
    
    subscriptions = notification_storage.get_user_subscriptions(user_id)
    if subscriptions:
        for sub in subscriptions:
            response += f"‚Ä¢ {sub}\n"
    else:
        response += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
    
    await bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(content_types=['text', 'photo'])
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    if message.text:
        message_text = message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text[:50]}...")
    elif message.caption:
        message_text = message.caption
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text[:50]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = max(message.photo, key=lambda x: x.file_size)
            user_photos[user_id] = photo.file_id
            logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {photo.file_id}")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not message_text or not message_text.strip():
        logger.info(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await bot.send_chat_action(message.chat.id, 'typing')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_history = user_chat_histories.get(user_id, [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text[:50]}...")
    ceo_result = await ceo_dispatcher(message_text, chat_history)
    
    if ceo_result.get("type") == "error":
        response = ceo_result.get("message", "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è")
    else:
        intent = ceo_result.get("intent")
        confidence = ceo_result.get("confidence", 0.5)
        employee_name = ceo_result.get("employee_name", "")
        
        logger.info(f"–ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}")
        
        if intent == "search_info":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è: {employee_name}")
            response = await handle_search_request(employee_name, user_id)
            
        elif intent == "create_order":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è: {employee_name}")
            if chat_history:
                await bot.reply_to(message, f"üìù –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞... (—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)})")
            response = await process_order(user_id, message_text)
            
        elif intent == "unclear":
            # –ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ—è—Å–Ω–æ, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
            response = """ü§î <b>–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ:

üìã <b>–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b>
‚Ä¢ "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫, –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É"
‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞—è–≤–∫—É –¥–ª—è –ü–µ—Ç—Ä–æ–≤–∞ –Ω–∞ –ü–ë–û"

üîç <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>
‚Ä¢ "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–µ—Ç—Ä–æ–≤–µ"
‚Ä¢ "–ù–∞–π–¥–∏ –°–∏–¥–æ—Ä–æ–≤–∞"

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
    await bot.reply_to(message, response, parse_mode='HTML')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global notification_scheduler
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {token[:10]}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_scheduler = NotificationScheduler(bot, notification_storage)
        await notification_scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if notification_scheduler:
            await notification_scheduler.stop()

if __name__ == "__main__":
    asyncio.run(main())
