import os
import json
import asyncio
import requests
from openai import AsyncOpenAI

client = AsyncOpenAI(
    base_url="https://api.polza.ai/api/v1",
    api_key="ak_XfE3O425uoSp2I3xiLDJXmOX7xGLF3BZ1uXUImXxnpo"
)


BASE_URL = "http://80.87.193.89:8081"
# ==== —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã) ====

def call_external_api():
    """–ó–∞–±–∏—Ä–∞–µ—Ç JSON —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ API"""
    resp = requests.get(f"{BASE_URL}/api/people", timeout=10)
    resp.raise_for_status()
    return resp.json()

def format_employee(employee: dict) -> str:
    fio = employee.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    position = employee.get("position", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    all_certs = employee.get("all_certificates", [])

    active = []
    expiring = []
    expired = []
    missing = []

    for c in all_certs:
        assigned = c.get("is_assigned", False)
        data = c.get("assigned_data")
        name = c.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        if assigned and data:
            status = data.get("status")
            date_str = None
            if status == 4:  # –î–µ–π—Å—Ç–≤—É–µ—Ç
                active.append(f"‚úÖ {name}: –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {data.get('assigned_date')}")
            elif status == 3:  # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç
                expiring.append(f"‚ö† {name}: –ò—Å—Ç–µ–∫–∞–µ—Ç {data.get('assigned_date')}")
            elif status == 2:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                expired.append(f"‚≠ï {name}: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —Å {data.get('assigned_date')}")
            else:
                missing.append(f"‚ùå {name}")
        else:
            missing.append(f"‚ùå {name}")

    # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã–µ, —Å—Ç–∞–≤–∏–º "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" —Ç–æ–ª—å–∫–æ –¥–ª—è expiring
    if not expiring:
        expiring = ["–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    parts = [
        f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {fio}:",
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}",
        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:",
        "–î–µ–π—Å—Ç–≤—É—é—â–∏–µ:",
        *active,
        "–°–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∞—Ç—Å—è:",
        *expiring,
        "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:",
        *expired,
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ:",
        *missing
    ]

    return "\n".join(parts) 

def create_request(data: dict):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    return {
        "request": "new",
        "employee": data
    }

def send_message(request: dict):
    """–®–ª—ë—Ç –∑–∞—è–≤–∫—É –õ–∞—Ä–∏—Å–µ (–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)"""
    print("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –õ–∞—Ä–∏—Å–µ:", json.dumps(request, ensure_ascii=False, indent=2))
    return {"status": "ok", "to": "–õ–∞—Ä–∏—Å–∞"}

# ==== –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ====

tools = [
    {
        "type": "function",
        "function": {
            "name": "call_external_api",
            "description": "–ü–æ–ª—É—á–∞–µ—Ç JSON —Å–æ –≤—Å–µ–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            "parameters": {"type": "object", "properties": {}, "required": []}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "format_employee",
            "description": "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee": {"type": "object", "description": "JSON —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"}
                },
                "required": ["employee"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "create_request",
            "description": "–°–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
            "parameters": {
                "type": "object",
                "properties": {
                    "data": {"type": "object", "description": "–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã"}
                },
                "required": ["data"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "send_message",
            "description": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –õ–∞—Ä–∏—Å–µ",
            "parameters": {
                "type": "object",
                "properties": {
                    "request": {"type": "object", "description": "–ó–∞—è–≤–∫–∞"}
                },
                "required": ["request"]
            }
        }
    }
]

# ==== –¥–∏—Å–ø–µ—Ç—á–µ—Ä ====

async def run_dispatcher(user_prompt: str):
    response = await client.chat.completions.create(
        model="openai/gpt-4.1-mini",
        messages=[
            {"role": "system", "content": """
                –¢—ã ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
                - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º ("–ø–æ–∫–∞–∂–∏", "–Ω–∞–π–¥–∏") ‚Üí –≤—ã–∑–æ–≤–∏ call_external_api, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π, –∑–∞—Ç–µ–º –≤—ã–∑–æ–≤–∏ format_employee.
                - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å = "—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" ‚Üí –≤—ã–∑–æ–≤–∏ call_external_api (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –∑–∞—Ç–µ–º create_request, –∑–∞—Ç–µ–º send_message.
                - –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª ‚Üí —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            """},
            {"role": "user", "content": user_prompt}
        ],
        tools=tools
    )

    msg = response.choices[0].message

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å tool
    if msg.tool_calls:
        for tool_call in msg.tool_calls:
            func_name = tool_call.function.name
            args = json.loads(tool_call.function.arguments or "{}")

            if func_name == "call_external_api":
                result = call_external_api()
            elif func_name == "format_employee":
                result = format_employee(**args)
            elif func_name == "create_request":
                result = create_request(**args)
            elif func_name == "send_message":
                result = send_message(**args)
            else:
                result = {"error": "unknown function"}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
            followup = await client.chat.completions.create(
                model="openai/gpt-4.1-mini",
                messages=[
                    {"role": "user", "content": user_prompt},
                    msg,
                    {"role": "tool", "tool_call_id": tool_call.id, "content": json.dumps(result, ensure_ascii=False)}
                ]
            )
            return followup.choices[0].message.content

    return msg.content

# ==== –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ ====

async def main():
    out = await run_dispatcher("–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ï–≥–æ—Ä–æ–≤–∞")
    print("ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n", out)

if __name__ == "__main__":
    asyncio.run(main())