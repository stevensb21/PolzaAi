import os
import json
import asyncio
import requests
from openai import AsyncOpenAI

client = AsyncOpenAI(
    base_url="https://api.polza.ai/api/v1",
    api_key="ak_XfE3O425uoSp2I3xiLDJXmOX7xGLF3BZ1uXUImXxnpo"
)


BASE_URL = "http://80.87.193.89:8081"
# ==== —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã) ====

def call_external_api():
    """–ó–∞–±–∏—Ä–∞–µ—Ç JSON —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ API"""
    resp = requests.get(f"{BASE_URL}/api/people", timeout=10)
    resp.raise_for_status()
    return resp.json()


async def sort_employee(employee):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON"""
    user_prompt = f"–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {employee}"
    json_employee = call_external_api()
    response = await client.chat.completions.create(
        model="openai/gpt-4.1",
        messages=[
            {"role": "system", "content": """
                –¢—ã ‚Äî –≤—ã–±–∏—Ä–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
                -–≤—ã–∑–æ–≤–∏ call_external_api
                -–≤—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ JSON –ø–æ —Ñ–∏–ª—å—Ç—Ä—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –æ–¥–∏–Ω
                - –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–¥–∏–Ω, –≤–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                -–≤–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π JSON —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–µ–∑–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π JSON —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            """},
            {"role": "user", "content": employee},
            {"role": "assistant", "content": json.dumps(json_employee)}
        ],
        tools=tools
    )
    return response.choices[0].message.content

tools = [
    {
        "type": "function",
        "function": {
            "name": "call_external_api",
            "description": "–ü–æ–ª—É—á–∞–µ—Ç JSON —Å–æ –≤—Å–µ–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            "parameters": {"type": "object", "properties": {}, "required": []}
        }
    },
    {
        "type": "function",
        "function": {
            "name": "sort_employee",
            "description": "–í—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee": {"type": "string", "description": "–§–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"}
                },
                "required": ["employee"]
            }
        }
    }
]

# ==== –¥–∏—Å–ø–µ—Ç—á–µ—Ä ====

async def run_dispatcher(user_prompt: str):
    response = await client.chat.completions.create(
        model="openai/gpt-4.1-mini",
        messages=[
            {"role": "system", "content": """
                –¢—ã ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
                -–≤—ã–∑–æ–≤–∏ sort_employee
                
            """},
            {"role": "user", "content": user_prompt}
        ],
        tools=tools
    )

    msg = response.choices[0].message

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å tool
    if msg.tool_calls:
        for tool_call in msg.tool_calls:
            func_name = tool_call.function.name
            args = json.loads(tool_call.function.arguments or "{}")

            if func_name == "call_external_api":
                result = call_external_api()
            elif func_name == "sort_employee":
                result = await sort_employee(args["employee"])
            else:
                result = {"error": "unknown function"}

            
            return result

    return msg.content

# ==== –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ ====

async def main():
    out = await run_dispatcher("–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ä–∞–±–æ–≤")
    print("ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n", out)

if __name__ == "__main__":
    asyncio.run(main())