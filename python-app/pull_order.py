import os
import json
import asyncio
import requests
from openai import AsyncOpenAI
from datetime import datetime
from dateutil.relativedelta import relativedelta
from get_jsonAPIai import call_external_api, sort_employee
from dotenv import load_dotenv

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    client = AsyncOpenAI(
        base_url="https://api.polza.ai/api/v1",
        api_key=os.getenv("POLZA_AI_TOKEN")
    )
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

BASE_URL = "http://80.87.193.89:8081"

chat_history_order = []

tools = [
    # {
    #     "type": "function",
    #     "function": {
    #         "name": "call_external_api",
    #         "description": "–ü–æ–ª—É—á–∞–µ—Ç JSON —Å–æ –≤—Å–µ–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
    #         "parameters": {"type": "object", "properties": {}, "required": []}
    #     }
    # },
    {
        "type": "function",
        "function": {
            "name": "sort_employee",
            "description": "–í—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee": {"type": "string", "description": "–§–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"}
                },
                "required": ["employee"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "makeOrderFormat",
            "description": "–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee_name": {"type": "string", "description": "–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"},
                    "certificate_name": {"type": "array", "items": {"type": "string"}, "description": "–ù–∞–∑–≤–∞–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π"}
                },
                "required": ["employee_name", "certificate_name"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "clarification",
            "description": "–£—Ç–æ—á–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "parameters": {
                "type": "object",
                "properties": {
                    "order_data": {"type": "object", "description": "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"}
                },
                "required": ["order_data"]
            }
        }
    }
]

async def makeOrderFormat(messages, employee_name, certificate_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    json_people = await sort_employee(employee_name)
    
    print(f"DEBUG: sort_employee –≤–µ—Ä–Ω—É–ª: {type(json_people)}")
    print(f"DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ json_people: {json_people}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å JSON
    if isinstance(json_people, str):
        try:
            json_people = json.loads(json_people)
            print(f"DEBUG: –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {type(json_people)}")
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç sort_employee: {json_people}")
            return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É API
    if isinstance(json_people, dict) and 'error' in json_people:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {json_people['error']}")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    has_employee_data = False
    if isinstance(json_people, dict):
        if 'data' in json_people and json_people['data']:
            has_employee_data = True
        elif 'full_name' in json_people:
            has_employee_data = True
    elif isinstance(json_people, list) and len(json_people) > 0:
        has_employee_data = True
    
    if not has_employee_data:
        print(f"üîç –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ")
        return await createNewEmployee(employee_name, certificate_name, messages)
    
    # Initialize all fields to "null"
    employee_full_name = employee_name
    snils = "null"
    inn = "null"
    position = "null"
    birth_date = "null"
    phone = "null"
    
    if isinstance(json_people, dict) and 'data' in json_people:
        data = json_people['data']
        print(f"DEBUG: data type: {type(data)}, length: {len(data) if isinstance(data, list) else 'not list'}")
        if isinstance(data, list) and len(data) > 0:
            employee_full_name = data[0].get('full_name', employee_name)
            snils = data[0].get('snils', "null")
            inn = data[0].get('inn', "null")
            position = data[0].get('position', "null")
            birth_date = data[0].get('birth_date', "null")
            phone = data[0].get('phone', "null")
            print(f"DEBUG: Extracted from data[0]: {employee_full_name}, {snils}, {inn}")
        elif isinstance(data, dict):
            # data is a dict with employee data directly
            employee_full_name = data.get('full_name', employee_name)
            snils = data.get('snils', "null")
            inn = data.get('inn', "null")
            position = data.get('position', "null")
            birth_date = data.get('birth_date', "null")
            phone = data.get('phone', "null")
            print(f"DEBUG: Extracted from data dict: {employee_full_name}, {snils}, {inn}")
    elif isinstance(json_people, dict) and 'full_name' in json_people:
        # json_people is a dict with employee data directly
        print(f"DEBUG: json_people is employee data dict")
        employee_full_name = json_people.get('full_name', employee_name)
        snils = json_people.get('snils', "null")
        inn = json_people.get('inn', "null")
        position = json_people.get('position', "null")
        birth_date = json_people.get('birth_date', "null")
        phone = json_people.get('phone', "null")
        print(f"DEBUG: Extracted from json_people: {employee_full_name}, {snils}, {inn}")
    elif isinstance(json_people, list) and len(json_people) > 0:
        print(f"DEBUG: json_people is list, length: {len(json_people)}")
        if isinstance(json_people[0], dict):
            employee_full_name = json_people[0].get('full_name', employee_name)
            snils = json_people[0].get('snils', "null")
            inn = json_people[0].get('inn', "null")
            position = json_people[0].get('position', "null")
            birth_date = json_people[0].get('birth_date', "null")
            phone = json_people[0].get('phone', "null")
            print(f"DEBUG: Extracted from json_people[0]: {employee_full_name}, {snils}, {inn}")
    else:
        print(f"DEBUG: No matching condition found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
    required_fields = [snils, inn, position, birth_date, phone]
    has_missing_data = any(field is None or field == "null" for field in required_fields)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    order_type = "clarification" if has_missing_data else "readyorder"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –æ–±—ä–µ–∫—Ç
    order_json = {
        "type": order_type,
        "employee": {
            "full_name": employee_full_name,
            "snils": snils,
            "inn": inn,
            "position": position,
            "birth_date": birth_date,
            "phone": phone
        },
        "certificate": certificate_name,
        "status": "pending"
    }
    
    print(f"DEBUG: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π order_json: {order_json}")
    return order_json

async def clarification(messages, order_json):
    """–£—Ç–æ—á–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = await client.chat.completions.create(
        model="openai/gpt-4.1-mini",
        messages=[
            {"role": "system", "content": f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞: {json.dumps(order_json, indent=4, ensure_ascii=False)}

                    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    –ü—Ä–æ–≤–µ—Ä—å –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ employee –µ—Å—Ç—å –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–µ message.
                    –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –≤–µ—Ä–Ω–∏ order_json, –Ω–æ –∏–∑–º–µ–Ω–∏ –≤ –Ω–µ–º type –Ω–∞ "readyorder".
                    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –≤–µ—Ä–Ω–∏ order_json, –Ω–æ –∏–∑–º–µ–Ω–∏ –≤ –Ω–µ–º type –Ω–∞ "clarification".
                    –í –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å—Å—è –≤–æ—Ç —Ç–∞–∫–æ—Ü JSON:
                         {{
                            "type": "clarification –∏–ª–∏ readyorder",
                            "employee": {{
                                "full_name": "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                "snils": "–°–ù–ò–õ–° —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                "inn": "–ò–ù–ù —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                            }},
                            "certificate": [
                                "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è"
                            ],
                            "status": "new_employee",
                            "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ"
                        }}
                    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ order_json, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""},
            {"role": "user", "content": f"–£—Ç–æ—á–Ω–∏ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {messages}"}
        ]
    )
    
    if not response.choices or not response.choices[0].message:
        return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API clarification"
    
    msg = response.choices[0].message
    print(f"–û—Ç–≤–µ—Ç –ò–ò clarification: {msg.content}")
    
    return msg.content

def format_message(message):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    birth_date = message.get("employee", {}).get("birth_date")
    if birth_date and birth_date != "null":
        try:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (1981-01-01T00:00:00.000000Z)
            if "T" in str(birth_date):
                from datetime import datetime
                date_obj = datetime.fromisoformat(str(birth_date).replace("Z", "+00:00"))
                formatted_date = date_obj.strftime("%d.%m.%Y")
            else:
                formatted_date = str(birth_date)
        except:
            formatted_date = str(birth_date)
    else:
        formatted_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    return {
        "message": f""" –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n –¥–ª—è {message.get("employee", {}).get("full_name")} \n —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º {message.get("certificate")}
        \n –°–ù–ò–õ–°: {message.get("employee", {}).get("snils")} \n –ò–ù–ù: {message.get("employee", {}).get("inn")} \n –î–æ–ª–∂–Ω–æ—Å—Ç—å: {message.get("employee", {}).get("position")} \n –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {formatted_date} \n –¢–µ–ª–µ—Ñ–æ–Ω: {message.get("employee", {}).get("phone")} """
    }

async def createNewEmployee(employee_name, certificate_name, messages):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        print(f"üë§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò
        system_message = {
            "role": "system",
            "content": f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ '{employee_name}'.
            
            –ò—â–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:
            - –°–ù–ò–õ–° 
            - –ò–ù–ù 
            - –î–æ–ª–∂–Ω–æ—Å—Ç—å
            - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è 
            - –¢–µ–ª–µ—Ñ–æ–Ω 
            
            –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è.
            –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å "null".
            
            –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
            {{
                "type": "clarification",
                "employee": {{
                    "full_name": "{employee_name}",
                    "snils": "–Ω–∞–π–¥–µ–Ω–Ω—ã–π_—Å–Ω–∏–ª—Å_–∏–ª–∏_null",
                    "inn": "–Ω–∞–π–¥–µ–Ω–Ω—ã–π_–∏–Ω–Ω_–∏–ª–∏_null",
                    "position": "–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å_–∏–ª–∏_null",
                    "birth_date": "–Ω–∞–π–¥–µ–Ω–Ω–∞—è_–¥–∞—Ç–∞_–∏–ª–∏_null",
                    "phone": "–Ω–∞–π–¥–µ–Ω–Ω—ã–π_—Ç–µ–ª–µ—Ñ–æ–Ω_–∏–ª–∏_null"
                }},
                "certificate": {certificate_name},
                "status": "new_employee",
            }}

            –ù–µ –∑–∞–¥–∞–≤–∞–π –ª–∏—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ–ª—å–∫–æ —É—Ç–æ—á–Ω–∏ –¥–∞–Ω–Ω—ã–µ.
            """
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        messages_with_system = [system_message] + messages
        
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
        
        response = await client.chat.completions.create(
            model="openai/gpt-4.1-mini",
            messages=messages_with_system,
            temperature=0.1
        )
        
        if not response.choices or not response.choices[0].message:
            return None
        
        ai_response = response.choices[0].message.content
        print(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {ai_response}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
            new_employee = json.loads(ai_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
            if "type" in new_employee and "employee" in new_employee:
                print(f"‚úÖ –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò: {json.dumps(new_employee, indent=2, ensure_ascii=False)}")
                return new_employee
            else:
                print("‚ùå –ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return None
                
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò: {e}")
            return None
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}"
        print(error_msg)
        return None

def addToDatabase(order_json):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import requests
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
        employee = order_json.get("employee", {})
        certificate = order_json.get("certificate", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        api_data = {
            "full_name": employee.get("full_name", ""),
            "position": employee.get("position", ""),
            "phone": employee.get("phone", ""),
            "snils": employee.get("snils", ""),
            "inn": employee.get("inn", ""),
            "birth_date": employee.get("birth_date", ""),
            "status": "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
            # "photo": "@https://us1.api.pro-talk.ru/get_image/fa165d7a-2322-4081-9068-c12ce86a8bf5.jpg"
        }
        
        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        api_data = {k: v for k, v in api_data.items() if v and v != "null"}
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ API: {json.dumps(api_data, indent=2, ensure_ascii=False)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            "http://80.87.193.89:8081/api/people",
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            json=api_data,
            timeout=10
        )
        
        if response.status_code == 200 or response.status_code == 201:
            print("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return f"‚úÖ –ó–∞–∫–∞–∑ –¥–ª—è {employee.get('full_name')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í –æ–∂–∏–¥–∞–Ω–∏–∏'"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {response.status_code} - {response.text}"
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        print(error_msg)
        return error_msg

async def order_dispatcher(messages, chat_history):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    print(f"\n\n\nchat_history: {chat_history_order}\n\n\n messages: {messages}\n\n\n")
    try:
        if not client:
            return "‚ùå –û—à–∏–±–∫–∞: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            

        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –ò–ò (—Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)})")
        global order_chat_history
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
        messages_with_system = [
            {"role": "system", "content": f"""
                –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π.

                –í–ê–ñ–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º!
                –£ —Ç–µ–±—è –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {json.dumps(chat_history, ensure_ascii=False)}. 
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç: '{messages[-1]['content']}'. 
                –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –∫–∞–∫–æ–π –∑–∞–∫–∞–∑ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è, –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ order_data.

                –£ —Ç–µ–±—è –µ—Å—Ç—å 2 —Ñ—É–Ω–∫—Ü–∏–∏:
                1. makeOrderFormat(employee_name, certificate_name) ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                2. clarification(order_data) ‚Äî —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞

                –ü–†–ê–í–ò–õ–ê:
                - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–§–ò–û, –°–ù–ò–õ–°, –ò–ù–ù, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å) –∏ –ø—Ä–æ—Å–∏—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ ‚Üí –≤—ã–∑—ã–≤–∞–π makeOrderFormat()
                - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–º–æ–Ω—Ç–∞–∂–Ω–∏–∫" –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏) ‚Üí –≤—ã–∑—ã–≤–∞–π clarification() —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
                - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Üí –≤—ã–∑—ã–≤–∞–π clarification()
                - –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏!

                - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –°–î–ï–õ–ê–¢–¨ –ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Üí –≤—ã–∑—ã–≤–∞–π makeOrderFormat().
                    ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                        {{
                        "employee_name": "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                        "certificate_name": ["–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è"]
                        }}
                    ‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Å—Å–∏–≤ –¥–ª—è certificate_name, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ.

                    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∞ –µ—â—ë –¥–æ–±–∞–≤—å –ü–ë–û", "–Ω–µ –ï–≥–æ—Ä–æ–≤, –∞ –ï–≥–æ—Ä–æ–≤ –ò–≤–∞–Ω", "–Ω—É–∂–Ω–æ 2 —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è") ‚Üí –≤—ã–∑—ã–≤–∞–π clarification().
                    ‚Ä¢ –í clarification() –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞–π:
                        - messages ‚Üí —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        - order_data ‚Üí JSON –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å (–ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ chat_history —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∫–∞–∫–æ–π –∑–∞–∫–∞–∑ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å) –¢–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é
                        –∑–∞–∫–∞–∑ –≤—ã–≥–ª—è–¥–∏—Ç –≤ –≤–∏–¥–µ json –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–æ—Ç —Ç–∞–∫ {{'type': '–ü–†–ò–ú–ï–†', 'employee': {{'full_name': '–ü–†–ò–ú–ï–†', 'snils': '–ü–†–ò–ú–ï–†', 'inn': '–ü–†–ò–ú–ï–†', 'position': None, 'birth_date': '–ü–†–ò–ú–ï–†', 'phone': '–ü–†–ò–ú–ï–†'}}, 'certificate': ['–ü–†–ò–ú–ï–†'], 'status': '–ü–†–ò–ú–ï–†', 'message': '–ü–†–ò–ú–ï–†'}}
                - –ñ–ï–°–¢–ö–û–ï –ü–†–ê–í–ò–õ–û: –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

                - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –°–î–ï–õ–ê–¢–¨ –ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Üí –≤—ã–∑—ã–≤–∞–π makeOrderFormat().
                –ü—Ä–∏–º–µ—Ä—ã:
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–°–∞–±–∏—Ä–æ–≤ –†—É—Å—Ç–µ–º, –°–ù–ò–õ–° 195-071-028-66, –Ω—É–∂–Ω–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã"
                –û—Ç–≤–µ—Ç: makeOrderFormat({{"employee_name": "–°–∞–±–∏—Ä–æ–≤ –†—É—Å—Ç–µ–º –†–∞—Ñ–∏—Å–æ–≤–∏—á", "certificate_name": ["—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã"]}})

                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–∑–∞–∫–∞–∑–∞—Ç—å –ï–≥–æ—Ä–æ–≤—É –≠–ë"
                –û—Ç–≤–µ—Ç: makeOrderFormat({{"employee_name": "–ï–≥–æ—Ä–æ–≤", "certificate_name": ["–≠–ë"]}})

                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–∏ –µ—â—ë –¥–æ–±–∞–≤—å –ë–°–ò–ó"
                –û—Ç–≤–µ—Ç: clarification(messages="–∏ –µ—â—ë –¥–æ–±–∞–≤—å –ë–°–ò–ó", order_data={{"employee_name": "–ï–≥–æ—Ä–æ–≤", "certificate_name": ["–≠–ë"]}})

                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–º–æ–Ω—Ç–∞–∂–Ω–∏–∫" (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
                –û—Ç–≤–µ—Ç: clarification(messages="–º–æ–Ω—Ç–∞–∂–Ω–∏–∫", order_data={{"employee_name": "–°–∞–±–∏—Ä–æ–≤ –†—É—Å—Ç–µ–º –†–∞—Ñ–∏—Å–æ–≤–∏—á", "certificate_name": ["–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ª–µ—Å–∞—Ö"]}})

                –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Å—Å–∏–≤ –¥–ª—è certificate_name, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ!
                """}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        messages_with_system.extend(messages)
        
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é {len(messages_with_system)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ API")
        print(f"DEBUG: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages_with_system[0]}")
        print(f"DEBUG: –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages_with_system[-1]}")
        
        response = await client.chat.completions.create(
            model="openai/gpt-4.1-mini",
            messages=messages_with_system,
            tools=tools,
            tool_choice="auto"
        )
        

        if not response.choices or not response.choices[0].message:
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API"

        msg = response.choices[0].message
        print(f"–û—Ç–≤–µ—Ç –ò–ò: {msg.content}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ò–ò –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if msg.tool_calls:
            print(f"üîß –ò–ò —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(msg.tool_calls)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π tool call
            for tool_call in msg.tool_calls:
                tool_name = tool_call.function.name
                print(f"üîß –í—ã–∑—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
                
                
                        
                if tool_name == "makeOrderFormat":
                    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
                    try:
                        args = json.loads(tool_call.function.arguments)
                        employee_name = args.get("employee_name", "")
                        certificate_name = args.get("certificate_name", "")
                        print(f"DEBUG: employee_name: {employee_name}, certificate_name: {certificate_name}")
                        result = await makeOrderFormat(messages, employee_name, certificate_name)
                        print(f"DEBUG: result makeOrderFormat from order_dispatcher: {result}")
                        if result is None:
                            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"
                        if result.get("type") == "clarification":
                            result = await clarification(messages, result)
                            if isinstance(result, str):
                                try:
                                    parsed_result = json.loads(result)
                                    if parsed_result.get("type") == "clarification":
                                        chat_history_order.append({"role": "assistant", "content": json.dumps(parsed_result, ensure_ascii=False)})
                                        return parsed_result.get("message")
                                    else:
                                        addToDatabase(parsed_result)
                                        chat_history_order.append({"role": "assistant", "content": json.dumps(format_message(parsed_result), ensure_ascii=False)})
                                        return format_message(parsed_result).get("message")
                                        
                                except json.JSONDecodeError:
                                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç clarification: {result}"
                            else:
                                if result.get("type") == "clarification":
                                    chat_history_order.append({"role": "assistant", "content": json.dumps(result, ensure_ascii=False)})
                                    return result.get("message")
                                else:
                                    addToDatabase(result)
                                    chat_history_order.append({"role": "assistant", "content": json.dumps(format_message(result), ensure_ascii=False)})
                                    return format_message(result).get("message")
                        else:
                            addToDatabase(result)
                            chat_history_order.append({"role": "assistant", "content": json.dumps(format_message(result), ensure_ascii=False)})
                            return format_message(result).get("message")
                    except json.JSONDecodeError:
                        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è makeOrderFormat"
                        
                elif tool_name == "clarification":
                    # –£—Ç–æ—á–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    try:
                        print(f"üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è clarification: {tool_call.function}")
                        args = json.loads(tool_call.function.arguments)
                        order_data = args.get("order_data", {})
                        
                        if order_data:
                            result = await clarification(messages, order_data)
                            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç clarification –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                            if isinstance(result, str):
                                try:
                                    parsed_result = json.loads(result)
                                    if parsed_result.get("type") == "clarification":
                                        chat_history_order.append({"role": "assistant", "content": json.dumps(parsed_result, ensure_ascii=False)})
                                        return parsed_result.get("message")
                                    else:
                                        addToDatabase(parsed_result)
                                        chat_history_order.append({"role": "assistant", "content": json.dumps(parsed_result, ensure_ascii=False)})
                                        return format_message(parsed_result).get("message")
                                except json.JSONDecodeError:
                                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç clarification: {result}"
                            else:
                                if result.get("type") == "clarification":
                                    chat_history_order.append({"role": "assistant", "content": json.dumps(result, ensure_ascii=False)})
                                    return result.get("message")
                                else:
                                    addToDatabase(result)
                                    chat_history_order.append({"role": "assistant", "content": json.dumps(result, ensure_ascii=False)})
                                    return format_message(result).get("message")
                        else:
                        
                            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"
                    except json.JSONDecodeError:
                        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è clarification"
                        
                else:
                    return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
        
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not msg.content:
            return "‚ùå –û—à–∏–±–∫–∞: –ò–ò –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç"
        
        try:
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response_data = json.loads(msg.content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
            if response_data.get("type") == "clarification":
                # –≠—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = response_data.get("message")
                if not message and "employee" in response_data:
                    message = response_data["employee"].get("message", "–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                chat_history_order.append({"role": "assistant", "content": json.dumps(response_data, ensure_ascii=False)})
                return message or "–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            elif response_data.get("type") == "readyorder":
                # –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat_history_order.append({"role": "assistant", "content": json.dumps(response_data, ensure_ascii=False)})
                return f"üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:\n{json.dumps(response_data, indent=4, ensure_ascii=False)}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            employee_name = response_data.get("employee_name")
            certificate_name = response_data.get("certificate_name")
            
            if employee_name:
                json_people = await sort_employee(employee_name)
                
                # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(json_people, str):
                    try:
                        json_people = json.loads(json_people)
                    except json.JSONDecodeError:
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                if not json_people or (isinstance(json_people, list) and len(json_people) == 0):
                    chat_history_order.append({"role": "assistant", "content": f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
                    return f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                
                order = await makeOrderFormat(messages, employee_name, certificate_name)
                
                if order is None:
                    chat_history_order.append({"role": "assistant", "content": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"})
                    return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"
                
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if order.get("type") == "clarification":
                    clarification_result = await clarification(messages, order)
                    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç clarification –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(clarification_result, str):
                        try:
                            parsed_result = json.loads(clarification_result)
                            return parsed_result.get("message", "–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                        except json.JSONDecodeError:
                            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç clarification: {clarification_result}"
                    else:
                        return clarification_result.get("message", "–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if order.get("type") == "readyorder":
                    return f"üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:\n{json.dumps(order, indent=4, ensure_ascii=False)}"
                else:
                    return order
            else:
                return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                
        except json.JSONDecodeError as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}\n–û—Ç–≤–µ—Ç –ò–ò: {msg.content}"
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ order_dispatcher: {str(e)}"
        print(error_msg)
        return error_msg

async def connect_dispatcher(messages, ceo_chat_history):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    global chat_history_order
    chat_history = ceo_chat_history.copy() if isinstance(ceo_chat_history, list) else []
    chat_history.extend(chat_history_order)
    result = await order_dispatcher(messages, chat_history)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    if isinstance(result, str):
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω" in result or "—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" in result:
            return {
                "type": "orderready",
                "message": result,
                "chat_history_order": json.dumps(chat_history_order, indent=4, ensure_ascii=False)
            }
        else:
            return {
                "type": "orderclar",
                "message": result,
                "chat_history_order": json.dumps(chat_history_order, indent=4, ensure_ascii=False)
            }
    elif isinstance(result, dict):
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ type
        if result.get("type") == "readyorder":
            return {
                "type": "orderready",
                "message": result.get("message", str(result)),
                "chat_history_order": json.dumps(chat_history_order, indent=4, ensure_ascii=False)
            }
        else:
            return {
                "type": "orderclar",
                "message": result.get("message", str(result)),
                "chat_history_order": json.dumps(chat_history_order, indent=4, ensure_ascii=False)
            }
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        return {
            "type": "orderclar",
            "message": str(result),
            "chat_history_order": json.dumps(chat_history_order, indent=4, ensure_ascii=False)
        }
