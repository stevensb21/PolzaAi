import os
import json
import asyncio
from openai import AsyncOpenAI
from pull_order import connect_dispatcher
from get_jsonAPIai import connect_search_dispatcher 
from dotenv import load_dotenv

load_dotenv()

type_of_request = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    client = AsyncOpenAI(
        base_url="https://api.polza.ai/api/v1",
        api_key=os.getenv("POLZA_AI_TOKEN")
    )
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

ceo_chat_history = []

async def ceo_dispatcher(messages):
    """–ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å"""
    try:
        if not client:
            return "‚ùå –û—à–∏–±–∫–∞: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print(f"üéØ CEO –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å (—Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)})")
        
        global type_of_request
        global ceo_chat_history
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        system_message = {
            "role": "system", 
            "content": """–¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä (CEO) —Å–∏—Å—Ç–µ–º—ã.
            
            –£ —Ç–µ–±—è –µ—Å—Ç—å 2 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:
            
            1. **order_dispatcher** ‚Äî –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π
               - –ó–∞–ø—É—Å–∫–∞–π –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ó–ê–ö–ê–ó–ê–¢–¨ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è
               - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–∑–∞–∫–∞–∑–∞—Ç—å", "–∑–∞–∫–∞–∑", "–Ω—É–∂–Ω–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–ü—Ä–æ—à—É –æ—Ñ–æ—Ä–º–∏—Ç—å", "–ü—Ä–æ—à—É –æ–±—É—á–∏—Ç—å", "–ü—Ä–æ—à—É –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å"
               - –ü—Ä–∏–º–µ—Ä—ã: "–∑–∞–∫–∞–∑–∞—Ç—å –ï–≥–æ—Ä–æ–≤—É –≠–ë", "–Ω—É–∂–Ω–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –¥–ª—è –ò–≤–∞–Ω–æ–≤–∞"
            
            2. **search_dispatcher** ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
               - –ó–∞–ø—É—Å–∫–∞–π –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ü–û–°–ú–û–¢–†–ï–¢–¨/–ù–ê–ô–¢–ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
               - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–ø–æ–∫–∞–∑–∞—Ç—å", "–Ω–∞–π—Ç–∏", "–∫—Ç–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å–ø–∏—Å–æ–∫", "–≤—Å–µ", "–ü—Ä–æ–≤–µ—Ä—å", "–ü—Ä–æ–≤–µ—Ä—è–π"
               - –ü—Ä–∏–º–µ—Ä—ã: "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö", "–Ω–∞–π–¥–∏ –ï–≥–æ—Ä–æ–≤–∞", "–∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª–µ"
            
            **–ü–†–ê–í–ò–õ–ê:**
            - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - –í –ü–ï–†–í–£–Æ –û–ß–ï–†–ï–î–¨ –ø—Ä–æ–≤–µ—Ä—è–π type_of_request –µ—Å–ª–∏ –æ–Ω = "orderclar" —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π "order", –µ—Å–ª–∏ –æ–Ω = "searchclar" —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π "search" 
            - –ï—Å–ª–∏ type_of_request = "orderready" —Ç–æ –¥–∞–ª—å—à–µ –≤—ã–±–∏—Ä–∞–π –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞
            - –ï—Å–ª–∏ type_of_request = "searchready" —Ç–æ –¥–∞–ª—å—à–µ –≤—ã–±–∏—Ä–∞–π –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ 
            - –ï—Å–ª–∏ —ç—Ç–æ –ó–ê–ö–ê–ó ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–π "order"
            - –ï—Å–ª–∏ —ç—Ç–æ –ü–û–ò–°–ö/–ü–†–û–°–ú–û–¢–† ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–π "search"
            - –ï—Å–ª–∏ –Ω–µ—è—Å–Ω–æ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–π "search" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
            **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:** –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: "order" –∏–ª–∏ "search"
            """
        }
        print(f"üéØ\n\n CEO chat_history: {ceo_chat_history}\n\n")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        messages_with_system = [system_message] + messages + ceo_chat_history
        print(f"üéØ\n\n CEO messages_with_system: {messages_with_system}\n\n")
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é {len(messages_with_system)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ CEO API")
        
        response = await client.chat.completions.create(
            model="openai/gpt-4.1-mini",
            messages=messages_with_system,
            max_tokens=10,
            temperature=0.1
        )
        
        if not response.choices or not response.choices[0].message:
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API"
        
        decision = response.choices[0].message.content.strip().lower()
        print(f"üéØ CEO —Ä–µ—à–µ–Ω–∏–µ: {decision}")
        if type_of_request == "orderclar":
            decision = "order"
        elif type_of_request == "searchclar":
            decision = "search"
        print(f"üéØ CEO —Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ type_of_request: {decision}, {type_of_request}")
        


        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å
        if "order" in decision:
            print("üìã –ó–∞–ø—É—Å–∫–∞—é order_dispatcher –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π")
            result = await connect_dispatcher(messages, messages_with_system)
            print(f"üéØ CEO —Ä–µ–∑—É–ª—å—Ç–∞—Ç order_dispatcher: {result.get("type")}")
            type_of_request = result.get("type")
            ceo_chat_history.append({"role": "assistant", "content": result.get("chat_history_order")})
            return result.get("message")
        elif "search" in decision:
            print("üîç –ó–∞–ø—É—Å–∫–∞—é search_dispatcher –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            result = await connect_search_dispatcher(messages)
            type_of_request = result.get("type")
            ceo_chat_history.append({"role": "assistant", "content": result.get("message")})
            return result.get("message")
        else:
            print("üîç –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞—é search_dispatcher")
            result = await connect_search_dispatcher(messages)
            type_of_request = result.get("type")
            ceo_chat_history.append({"role": "assistant", "content": result.get("message")})
            return result.get("message")
        
            
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ CEO: {str(e)}"
        print(error_msg)
        return error_msg

# async def main() -> None:
#     """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
#     print("üéØ CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, /exit ‚Äî –≤—ã—Ö–æ–¥.")
    
#     chat_history = [
#         {
#             "role": "system",
#             "content": "–¢—ã ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ –∑–∞–∫–∞–∑—ã–≤–∞–π —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è."
#         }
#     ]
    
#     while True:
#         try:
#             user_input = input("üë§ –í—ã: ").strip()
#             if not user_input:
#                 continue

#             if user_input.lower() in ["/exit", "–≤—ã—Ö–æ–¥", "quit", "exit"]:
#                 print("–î–æ —Å–≤—è–∑–∏!")
#                 break

#             if user_input.lower() in ["/reset", "reset"]:
#                 chat_history = chat_history[:1]
#                 print("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
#                 continue

#             # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
#             chat_history.append({"role": "user", "content": user_input})
            
#             # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
#             if len(chat_history) > 20:
#                 chat_history = [chat_history[0]] + chat_history[-19:]

#             try:
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä
#                 ai_text = await ceo_dispatcher(chat_history)
                
#                 # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
#                 chat_history.append({"role": "assistant", "content": ai_text})
                
#                 # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
#                 print("ü§ñ –ò–ò:\n" + ai_text)
                
#             except Exception as e:
#                 error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
#                 print(error_msg)
#                 chat_history.append({"role": "assistant", "content": error_msg})
                
#         except KeyboardInterrupt:
#             print("\n\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
#             break
#         except Exception as e:
#             print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
#             continue

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except Exception as e:
#         print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

