import logging
import os
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
formatter = logging.Formatter(
    '%(asctime)s | %(levelname)-8s | %(filename)s:%(lineno)d | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('PolzaAI')
logger.setLevel(logging.DEBUG)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler(
    os.path.join(log_dir, f'polza_ai_{datetime.now().strftime("%Y%m%d")}.log'),
    encoding='utf-8'
)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

def format_long_message(msg, max_length=100):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫"""
    if len(msg) <= max_length:
        return msg
    
    lines = []
    current_line = ""
    words = msg.split()
    
    for word in words:
        if len(current_line + " " + word) <= max_length:
            current_line += (" " + word) if current_line else word
        else:
            if current_line:
                lines.append(current_line)
            current_line = word
    
    if current_line:
        lines.append(current_line)
    
    return "\n" + "\n".join(f"  {line}" for line in lines)

def log_function_entry(func_name, args=None, kwargs=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é"""
    msg = f"üöÄ –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é: {func_name}"
    if args:
        msg += f"\n  –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}"
    if kwargs:
        msg += f"\n  –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}"
    logger.debug(format_long_message(msg))

def log_function_exit(func_name, result=None, error=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏"""
    if error:
        msg = f"‚ùå –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} —Å –æ—à–∏–±–∫–æ–π: {error}"
    else:
        msg = f"‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}"
        if result is not None:
            if isinstance(result, str) and len(result) > 100:
                msg += f"\n  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            else:
                msg += f"\n  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    
    logger.debug(format_long_message(msg))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def debug(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logger.debug(f"üîç {format_long_message(msg)}")

def info(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"‚ÑπÔ∏è {format_long_message(msg)}")

def warning(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    logger.warning(f"‚ö†Ô∏è {format_long_message(msg)}")

def error(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå {format_long_message(msg)}")

def critical(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.critical(f"üö® {format_long_message(msg)}")

def success(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info(f"‚úÖ {format_long_message(msg)}")

def ceo(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CEO –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info(f"üéØ {format_long_message(msg)}")

def search(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info(f"üîç {format_long_message(msg)}")

def order(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"""
    logger.info(f"üìã {format_long_message(msg)}")

def bot(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    logger.info(f"ü§ñ {format_long_message(msg)}")

def api(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info(f"üåê {format_long_message(msg)}")
