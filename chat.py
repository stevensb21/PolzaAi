import os
import json
import asyncio
import requests

from ai_request import make_api_request_with_fallback
from api_settings import DATE_CONVERSION_PRIORITY, CERTIFICATE_SEARCH_PRIORITY

from validate import makeOrderformat, validateOrder
from dotenv import load_dotenv
from api import search_employees, addPeople, UpdatePeople


load_dotenv()

chat_history = []


async def main():
    while True:
        order = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑: ")
        if order == "exit":
            break
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        validation_result = await validateOrder(order, chat_history)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        try:
            if isinstance(validation_result, str):
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                json_str = validation_result.strip()
                if json_str.startswith('```json'):
                    json_str = json_str[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if json_str.endswith('```'):
                    json_str = json_str[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                json_str = json_str.strip()
                
                order_data = json.loads(json_str)
            else:
                order_data = validation_result
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {validation_result}")
            continue
            
        if order_data.get("error") == "missing_data":
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–∞–∑–µ: {order_data.get('message')}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            chat_history.append({"role": "user", "content": order})
            continue
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –∑–∞–∫–∞–∑–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {order_data}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "user", "content": order})
        chat_history.append({"role": "assistant", "content": str(order_data)})
        order_json = await makeOrderformat(order, chat_history)
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç makeOrderformat
        try:
            if isinstance(order_json, str):
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                json_str = order_json.strip()
                if json_str.startswith('```json'):
                    json_str = json_str[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if json_str.endswith('```'):
                    json_str = json_str[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                json_str = json_str.strip()
                
                order_data = json.loads(json_str)
            else:
                order_data = order_json
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∑–∞–∫–∞–∑–∞: {e}")
            print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {order_json}")
            continue
            
        print(f"‚úÖ –§–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {order_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing_employee = await search_employees(order_data.get("full_name"))
        
        if existing_employee and isinstance(existing_employee, dict):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            order_data["id"] = existing_employee.get("id")
            result = await UpdatePeople(order_data)
            print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {result}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            result = await addPeople(order_data)
            print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {result}")
        
        chat_history.append({"role": "assistant", "content": str(result)})
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {chat_history}")
        print(f"üßπ –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
        chat_history.clear()
    
if __name__ == "__main__":
    asyncio.run(main())