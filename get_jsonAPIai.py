import os
import json
import asyncio
import requests
from openai import AsyncOpenAI
from dotenv import load_dotenv
from datetime import datetime
from dateutil.relativedelta import relativedelta
from logger import search as search_log, debug, info, error, critical, success, api, log_function_entry, log_function_exit

load_dotenv()




# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    client = AsyncOpenAI(
    base_url="https://api.polza.ai/api/v1",
        api_key=os.getenv("POLZA_AI_TOKEN")
    )
except Exception as e:
    critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

# BASE_URL = "http://80.87.193.89:8081"
BASE_URL = "http://labor.tetrakom-crm-miniapp.ru"

# –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# CONTEXT = {
#     "users": {
#         "–ª–∞—Ä–∏—Å–∞": {
#             "telegram_id": "8316311496",
#             "alias": ["–ª–∞—Ä–∏—Å–∞", "–ª–∞—Ä–∏—Å–∞ –∏–∑ –æ—Ç–¥–µ–ª–∞", "–ª–∞—Ä–∏—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä"],
#         }
#     },
#     "endpoints": {
#         "people_list": "http://80.87.193.89:8081/api/people",
#         "people_data": "http://80.87.193.89:8001/data"
#     },
#     "instructions": [
#         "–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏.",
#         "–ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–∞–Ω–µ–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Ñ–∞–∫—Ç—ã.",
#         "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç –æ –õ–∞—Ä–∏—Å–µ, –∑–Ω–∞–π, —á—Ç–æ —ç—Ç–æ telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id:8316311496.",
#         "–ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å ‚Äî –¥–µ–ª–∞–π —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
#     ]
# }

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ‚Äî –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
chat_history_search = [ ]

def format_employee_info(employee_json):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
   
    try:
        # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if isinstance(employee_json, str):
            try:
                employee_json = json.loads(employee_json)
            except json.JSONDecodeError as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ format_employee_info: {str(e)}\n–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {employee_json[:100]}..."
                error(error_msg)
                log_function_exit("format_employee_info", error=error_msg)
                return error_msg

        # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –∫–ª—é—á data ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º
        if isinstance(employee_json, dict) and "data" in employee_json:
            employee_json = employee_json["data"]

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if isinstance(employee_json, list):
            if not employee_json:
                log_function_exit("format_employee_info", result="‚ö† –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                return "‚ö† –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
            try:
                formatted_list = "\n\n".join(format_employee_info(emp) for emp in employee_json)
             
                return formatted_list
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ format_employee_info: {str(e)}"
                error(error_msg)
                log_function_exit("format_employee_info", error=error_msg)
                return error_msg

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
        if isinstance(employee_json, dict) and "message" in employee_json:
            log_function_exit("format_employee_info", result=employee_json.get("message", "–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"))
            return employee_json.get("message", "–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

        # –û–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        if not isinstance(employee_json, dict):
            error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ format_employee_info: –æ–∂–∏–¥–∞–ª—Å—è dict, –ø–æ–ª—É—á–µ–Ω {type(employee_json)}"
            error(error_msg)
            
            return error_msg
        
        emp = employee_json
        all_certs = emp.get("all_certificates", [])

        lines = [
            f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {emp.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:",
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {emp.get('position', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:"
        ]

        def filter_certs(certs, status_code):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
           
            try:
                result = []
                if not isinstance(certs, list):
                    
                    return []
                    
                for cert in certs:
                    if isinstance(cert, dict):
                        assigned_data = cert.get("assigned_data")
                        # –ï—Å–ª–∏ assigned_data is None, –∑–Ω–∞—á–∏—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –Ω–µ –≤—ã–¥–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å 1 - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
                        if assigned_data is None and status_code == 1:
                            result.append(cert)
                        elif isinstance(assigned_data, dict):
                            status = assigned_data.get("status")
                            if status == status_code:
                                result.append(cert)
                return result
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π: {str(e)}"
                error(error_msg)

                return []

        def format_cert_with_date(cert, status_code):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π"""
        
            try:
                cert_name = cert.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                assigned_data = cert.get("assigned_data")
                
                if assigned_data is None:
                    
                    return f"‚ùå {cert_name}"
                
                if isinstance(assigned_data, dict):
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ assigned_data
                    assigned_date = assigned_data.get("assigned_date")
                    
                    if assigned_date:
                        try:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                            from datetime import datetime
                            if isinstance(assigned_date, str):
                                if "T" in assigned_date:
                                    date_obj = datetime.fromisoformat(assigned_date.replace("Z", "+00:00"))
                                else:
                                    date_obj = datetime.strptime(assigned_date, "%Y-%m-%d")
                            else:
                                date_obj = datetime.fromtimestamp(assigned_date)
                            
                            formatted_date = date_obj.strftime("%d.%m.%Y")
                            
                            if status_code == 4:  # –î–µ–π—Å—Ç–≤—É–µ—Ç
                                
                                return f"‚úÖ {cert_name}: –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {formatted_date}"
                            elif status_code == 2:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω
                                
                                return f"‚≠ï {cert_name}: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —Å {formatted_date}"
                            elif status_code == 3:  # –°–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è
                                
                                return f"üü° {cert_name}: –ò—Å—Ç–µ–∫–∞–µ—Ç {formatted_date}"
                            else:
                                
                                return f"‚ùå {cert_name}"
                        except:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –Ω–µ—ë
                            if status_code == 4:
                                
                                return f"‚úÖ {cert_name}"
                            elif status_code == 2:
                                
                                return f"‚≠ï {cert_name}"
                            elif status_code == 3:
                                
                                return f"üü° {cert_name}"
                            else:
                                
                                return f"‚ùå {cert_name}"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –Ω–∏—Ö
                        if status_code == 4:
                            
                            return f"‚úÖ {cert_name}"
                        elif status_code == 2:
                            
                            return f"‚≠ï {cert_name}"
                        elif status_code == 3:
                            
                            return f"üü° {cert_name}"
                        else:
                            
                            return f"‚ùå {cert_name}"
                else:
                    
                    return f"‚ùå {cert_name}"
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è: {str(e)}"
                error(error_msg)
                
                return f"‚ùå {cert.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        missing_certs = filter_certs(all_certs, 1)  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        expired_certs = filter_certs(all_certs, 2)  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω
        soon_expired_certs = filter_certs(all_certs, 3)  # –°–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è
        active_certs = filter_certs(all_certs, 4)  # –î–µ–π—Å—Ç–≤—É–µ—Ç

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è—Ö
        lines.append("–î–µ–π—Å—Ç–≤—É—é—â–∏–µ:")
        if active_certs:
            for cert in active_certs:
                lines.append(f"  ‚Ä¢ {format_cert_with_date(cert, 4)}")
        else:
            lines.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        lines.append("–°–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∞—Ç—Å—è:")
        if soon_expired_certs:
            for cert in soon_expired_certs:
                lines.append(f"  ‚Ä¢ {format_cert_with_date(cert, 3)}")
        else:
            lines.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        lines.append("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:")
        if expired_certs:
            for cert in expired_certs:
                lines.append(f"  ‚Ä¢ {format_cert_with_date(cert, 2)}")
        else:
            lines.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        lines.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ:")
        if missing_certs:
            for cert in missing_certs:
                lines.append(f"  ‚Ä¢ {format_cert_with_date(cert, 1)}")
        else:
            lines.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ: {lines}")
        log_function_exit("format_employee_info", result="\n".join(lines))
        return "\n".join(lines)

    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ format_employee_info: {str(e)}"
        error(error_msg)
        log_function_exit("format_employee_info", error=error_msg)
        return error_msg

async def call_external_api():

    """–í—ã–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π API —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    log_function_entry("call_external_api")
    try:
        api(f"–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ API: {BASE_URL}/api/people/compact")
        resp = requests.get(
            f"{BASE_URL}/api/people/compact?limit=30", 
            timeout=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            proxies={"http": None, "https": None},
            headers={'User-Agent': 'PolzaAI-Bot/1.0'}
        )
        
        if resp.status_code != 200:
            error_msg = f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code}"
            error(error_msg)
            log_function_exit("call_external_api", error=error_msg)
            return {
                "error": error_msg,
                "details": f"URL: {BASE_URL}/api/people/compact"
            }
        
        try:
            data = resp.json()
            api(f"API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")
            log_function_exit("call_external_api", result=len(data))
            return data
        except json.JSONDecodeError as e:
            error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç API: {str(e)}"
            error(error_msg)
            log_function_exit("call_external_api", error=error_msg)
            return {
                "error": error_msg,
                "details": f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {resp.text[:200]}..."
            }
            
    except requests.exceptions.Timeout:
        error_msg = "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API (10 —Å–µ–∫—É–Ω–¥)"
        error(error_msg)
        log_function_exit("call_external_api", error=error_msg)
        return {
            "error": error_msg,
            "details": f"URL: {BASE_URL}/api/people/compact"
        }
    except requests.exceptions.ConnectionError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
        error(error_msg)
        log_function_exit("call_external_api", error=error_msg)
        return {
            "error": error_msg,
            "details": f"URL: {BASE_URL}/api/people/compact"
        }
    except requests.exceptions.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        error(error_msg)
        log_function_exit("call_external_api", error=error_msg)
        return {
            "error": error_msg,
            "details": f"URL: {BASE_URL}/api/people/compact"
        }
    except Exception as e:
        error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ call_external_api: {str(e)}"
        error(error_msg)
        log_function_exit("call_external_api", error=error_msg)
        return {
            "error": error_msg,
            "details": f"URL: {BASE_URL}/api/people/compact"
        }

async def sort_employee(employee):

    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    log_function_entry("sort_employee", args=(employee,))
    if not client:
        error_msg = "OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        error(error_msg)
        log_function_exit("sort_employee", error=error_msg)
        return {
            "error": error_msg,
            "message": "‚ùå –û—à–∏–±–∫–∞: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }
    
    if not employee:
        error_msg = "–ü—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        error(error_msg)
        log_function_exit("sort_employee", error=error_msg)
        return {
            "error": error_msg,
            "message": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
        }
    
    search_log(f"–ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: '{employee}'")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    api_response = await call_external_api()

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ API
    if isinstance(api_response, dict) and "error" in api_response:
        log_function_exit("sort_employee", error=api_response)
        return api_response
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ api_response –Ω–µ None –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫
    if api_response is None:
        error_msg = "–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
        error(error_msg)
        log_function_exit("sort_employee", error=error_msg)
        return {
            "error": error_msg,
            "message": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ data –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
    if isinstance(api_response, dict) and "data" in api_response:
        json_employee = api_response["data"]
        debug(f"–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ data –∏–∑ API –æ—Ç–≤–µ—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(json_employee) if isinstance(json_employee, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}")
    else:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–µ—Å–ª–∏ API –≤–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤)
        json_employee = api_response
        debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(json_employee)}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JSON
    try:
        json_content = json.dumps(json_employee, ensure_ascii=False) if json_employee else "{}"
        debug(f"JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI: {json_content[:200]}...")
    except (TypeError, ValueError) as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: {str(e)}"
        error(error_msg)
        log_function_exit("sort_employee", error=error_msg)
        return {
            "error": error_msg,
            "message": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        }
        
    response = await client.chat.completions.create(
        model="openai/gpt-4.1-mini",
        messages=[
            {"role": "system", "content": """

                –¢—ã ‚Äî –≤—ã–±–∏—Ä–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π JSON —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É.
                
                –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
                {
                    "data": [
                        {
                            "id": "ID_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                            "full_name": "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                            "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                            "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                            "snils": "–°–ù–ò–õ–°",
                            "inn": "–ò–ù–ù",
                            "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                            "photo": "–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                            "all_certificates": [
                                {
                                "id": 2,
                                "name": "–í–ò–¢–† (–û–¢)",
                                "description": –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                "expiry_date": –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                "created_at": –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                "updated_at": –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                "is_assigned": true - –µ—Å–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ, false - –µ—Å–ª–∏ –Ω–µ –≤—ã–¥–∞–Ω–æ,
                                "assigned_data": {
                                    "assigned_date": –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                    "certificate_number": –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è,
                                    "status": –°—Ç–∞—Ç—É—Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è, 1 - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, 2 - –ü—Ä–æ—Å—Ä–æ—á–µ–Ω, 3 - –°–∫–æ—Ä–æ –ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è, 4 - –î–µ–π—Å—Ç–≤—É–µ—Ç
                                    "notes": –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—é
                                }
                                }
                            }
                    }}
                    -–∂–µ—Å—Ç–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:
                        - –Ω–µ —Å–º–µ—à–∏–≤–∞–π —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                        - JSON –∫–æ—Ç–æ—Ä—ã–π —è –æ–ø–∏—Å–∞–ª –≤—ã—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –≤ –æ—Ç–≤–µ—Ç–µ
                -–≤—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ JSON –ø–æ —Ñ–∏–ª—å—Ç—Ä—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –æ–¥–∏–Ω
                - –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–¥–∏–Ω, –≤–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                -–≤–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π JSON —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–µ–∑–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π JSON —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            """},
            {"role": "user", "content": employee},
            {"role": "assistant", "content": json_content}
        ],
        temperature=0.1
    )
        
    if not response.choices or not response.choices[0].message:
        error_msg = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API"
        error(error_msg)
        log_function_exit("sort_employee", error=error_msg)
        return {
            "error": error_msg,
            "message": "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"
        }
    
    result = response.choices[0].message.content
    success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {result}")
    success("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    log_function_exit("sort_employee", result=result)
    return result
        
    

tools = [
    {
        "type": "function",
        "function": {
            "name": "sort_employee",
            "description": "–í—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ JSON",
            "parameters": {
                "type": "object",
                "properties": {
                    "employee": {"type": "string", "description": "–§–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"}
                },
                "required": ["employee"]
            }
        }
    }
]

# ==== –¥–∏—Å–ø–µ—Ç—á–µ—Ä ====


async def search_dispatcher(messages: list, chat_history):
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    log_function_entry("search_dispatcher", args=(messages, chat_history))
    try:
        if not client:
            error_msg = "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            critical(error_msg)
            log_function_exit("search_dispatcher", error=error_msg)
            return error_msg
        
        if not messages or not isinstance(messages, list):
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"
            error(error_msg)
            log_function_exit("search_dispatcher", error=error_msg)
            return error_msg
        
        search_log(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –ò–ò (—Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)})")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        system_message = {"role": "system", "content": f"""–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {json.dumps(chat_history, ensure_ascii=False)}"""}
        all_messages = [system_message] + messages
        
        response = await client.chat.completions.create(
            model="openai/gpt-4.1-mini",
            messages=all_messages,
            tools=tools
        )

        if not response.choices or not response.choices[0].message:
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API"
            error(error_msg)
            log_function_exit("search_dispatcher", error=error_msg)
            return error_msg

        msg = response.choices[0].message

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å tool
        if msg.tool_calls:
            for tool_call in msg.tool_calls:
                try:
                    func_name = tool_call.function.name
                    search_log(f"–ò–ò –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é: {func_name}")         
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    try:
                        args = json.loads(tool_call.function.arguments or "{}")
                    except json.JSONDecodeError as e:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {str(e)}"
                        error(error_msg)
                        log_function_exit("search_dispatcher", error=error_msg)
                        return error_msg

                    if func_name == "sort_employee":
                        search_log(f"–í—ã–ø–æ–ª–Ω—è—é sort_employee —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: {args.get('employee', '–ù–ï –£–ö–ê–ó–ê–ù')}")
                        result = await sort_employee(args.get("employee", ""))
                        chat_history_search.append({"role": "assistant", "content": result})
                        response_text = format_employee_info(result)
                        success(f"–§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        log_function_exit("search_dispatcher", result=response_text)
                        return response_text
                    else:
                        response_text = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_name}"
                        success(f"–§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        log_function_exit("search_dispatcher", result=response_text)
                        return response_text
                                        
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {str(e)}"
                    error(error_msg)
                    log_function_exit("search_dispatcher", error=error_msg)
                    return error_msg

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not msg.content:
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –ò–ò –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç"
            error(error_msg)
            log_function_exit("search_dispatcher", error=error_msg)
            return error_msg
                    
        success("–ò–ò –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π")
        log_function_exit("search_dispatcher", result=msg.content)
        return msg.content

    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ search_dispatcher: {str(e)}"
        critical(error_msg)
        log_function_exit("search_dispatcher", error=error_msg)
        return error_msg

async def connect_search_dispatcher(messages, ceo_chat_history):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    log_function_entry("connect_search_dispatcher", args=(messages, ceo_chat_history))
    global chat_history_search
    chat_history_search = []
    chat_history = ceo_chat_history.copy() if isinstance(ceo_chat_history, list) else []
    chat_history.extend(chat_history_search)
    result = await search_dispatcher(messages, chat_history)
    success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ connect_search_dispatcher: {result}")
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    if isinstance(result, str):
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in result or "‚ö† –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É" in result:
            log_function_exit("connect_search_dispatcher", result={"type": "searchready", "message": result, "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)})
            return {
                "type": "searchready",
                "message": result,
                "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)
            }
        else:
            log_function_exit("connect_search_dispatcher", result={"type": "searchclar", "message": result, "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)})
            return {
                "type": "searchclar",
                "message": result,
                "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)
            }
    elif isinstance(result, dict):
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ type
        if result.get("type") == "searchready":
            log_function_exit("connect_search_dispatcher", result={"type": "searchready", "message": result.get("message", str(result)), "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)})
            return {
                "type": "searchready",
                "message": result.get("message", str(result)),
                "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)
            }
        else:
            log_function_exit("connect_search_dispatcher", result={"type": "searchclar", "message": result.get("message", str(result)), "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)})
            return {
                "type": "searchclar",
                "message": result.get("message", str(result)),
                "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)
            }
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        log_function_exit("connect_search_dispatcher", result={"type": "searchclar", "message": str(result), "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)})
        return {
            "type": "searchclar",
            "message": str(result),
            "chat_history_search": json.dumps(chat_history_search, indent=4, ensure_ascii=False)
        }

# ==== –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ ====

# async def main() -> None:
#     """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
#     print("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —á–∞—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, /exit ‚Äî –≤—ã—Ö–æ–¥.")
    
#     global chat_history
    
#     while True:
#         try:
#             user_input = input("üë§ –í—ã: ").strip()
#             if not user_input:
#                 continue

#             if user_input.lower() in ["/exit", "–≤—ã—Ö–æ–¥", "quit", "exit"]:
#                 print("–î–æ —Å–≤—è–∑–∏!")
#                 break

#             if user_input.lower() in ["/reset", "reset"]:
#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#                 chat_history = chat_history[:1]
#                 print("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
#                 continue

#             # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
#             chat_history.append({"role": "user", "content": user_input})

#             # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
#             if len(chat_history) > 20:
#                 chat_history = [chat_history[0]] + chat_history[-19:]

#             try:
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
#                 ai_text = await search_dispatcher(chat_history)
                
#                 # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
#                 chat_history.append({"role": "assistant", "content": ai_text})
                
#                 print("ü§ñ –ò–ò:\n" + ai_text)
#             except Exception as e:
#                 error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
#                 print(error_msg)
#                 # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –ò–ò –∑–Ω–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–µ
#                 chat_history.append({"role": "assistant", "content": error_msg})
                
#         except KeyboardInterrupt:
#             print("\n\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
#             break
#         except Exception as e:
#             print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
#             # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
#             continue

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except Exception as e:
#         print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")