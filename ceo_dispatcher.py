import os
import json
import asyncio
from openai import AsyncOpenAI
from dotenv import load_dotenv
from ai_request import make_api_request_with_fallback
from api_settings import ORDER_FORMAT_PRIORITY

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
try:
    client = AsyncOpenAI(
        base_url="https://api.polza.ai/api/v1",
        api_key=os.getenv("POLZA_AI_TOKEN")
    )
except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
    client = None

async def ceo_dispatcher(message_text, chat_history=None):
    """
    CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
    
    Args:
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∏–ø–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    if not client:
        return {
            "type": "error",
            "message": "‚ùå –û—à–∏–±–∫–∞: OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò
    messages = [
        {
            "role": "system",
            "content": """–¢—ã ‚Äî CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É.

–£ —Ç–µ–±—è –µ—Å—Ç—å 2 —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:

1. **–°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –û–ë–£–ß–ï–ù–ò–ï** (intent: "create_order")
   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   - –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ + –ø—Ä–æ—Å—å–±—É –æ–± –æ–±—É—á–µ–Ω–∏–∏
   - –ü—Ä–∏–º–µ—Ä—ã: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫, –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É", "–°–æ–∑–¥–∞–π –∑–∞—è–≤–∫—É –¥–ª—è –ü–µ—Ç—Ä–æ–≤–∞ –Ω–∞ –ü–ë–û", "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä, +7-999-123-45-67, –°–ù–ò–õ–° 123-456-789, –æ–±—É—á–∏—Ç—å –Ω–∞ –ª–µ—Å–∞"

2. **–ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò** (intent: "search_info")
   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
   - –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –§–ò–û –∏–ª–∏ –ø—Ä–æ—Å—å–±—É –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   - –ü—Ä–∏–º–µ—Ä—ã: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–µ—Ç—Ä–æ–≤–µ", "–ù–∞–π–¥–∏ –°–∏–¥–æ—Ä–æ–≤–∞", "–ú–∞–∑–∏—Ç–æ–≤ –ò–ª—å–Ω–∞—Ä –†–∞–∏—Å–æ–≤–∏—á"

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò:
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –§–ò–û (–±–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –°–ù–ò–õ–°, –ò–ù–ù, –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è) ‚Üí —ç—Ç–æ –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –ø—Ä–æ—Å—å–±—É –æ–± –æ–±—É—á–µ–Ω–∏–∏ ‚Üí —ç—Ç–æ –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò
- –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–ø–æ–∫–∞–∂–∏", "–Ω–∞–π–¥–∏", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¥–∞–Ω–Ω—ã–µ" ‚Üí —ç—Ç–æ –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò
- –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–æ–±—É—á–∏—Ç—å", "–∑–∞—è–≤–∫–∞", "—Å–æ–∑–¥–∞—Ç—å", "–Ω—É–∂–Ω–æ" + –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí —ç—Ç–æ –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ + —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!

–í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "intent": "create_order" –∏–ª–∏ "search_info",
    "employee_name": "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
    "message": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "confidence": 0.95
}

–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π intent: "unclear" –∏ confidence: 0.5"""
        },
        {
            "role": "user", 
            "content": f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {json.dumps(chat_history or [], ensure_ascii=False)}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
        }
    ]
    
    try:
        response, used_client, used_model = await make_api_request_with_fallback(
            priority_list=ORDER_FORMAT_PRIORITY,
            messages=messages,
            temperature=0.1,
            task_name="CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä"
        )
        
        if not response.choices or not response.choices[0].message:
            return {
                "type": "error",
                "message": "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API"
            }
        
        ai_response = response.choices[0].message.content
        print(f"ü§ñ CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—Ç: {ai_response}")
        
        try:
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            result = json.loads(ai_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if "intent" not in result:
                return {
                    "type": "error", 
                    "message": "‚ùå –û—à–∏–±–∫–∞: –ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è"
                }
            
            return {
                "type": "success",
                "intent": result.get("intent"),
                "employee_name": result.get("employee_name", ""),
                "message": result.get("message", message_text),
                "confidence": result.get("confidence", 0.5)
            }
            
        except json.JSONDecodeError as e:
            return {
                "type": "error",
                "message": f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}\n–û—Ç–≤–µ—Ç –ò–ò: {ai_response}"
            }
            
    except Exception as e:
        return {
            "type": "error",
            "message": f"‚ùå –û—à–∏–±–∫–∞ CEO –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}"
        }

async def handle_search_request(employee_name, user_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    
    Args:
        employee_name: –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    """
    try:
        print(f"üîç ===== –ù–ê–ß–ê–õ–û handle_search_request =====")
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")
        from api import search_employees
        
        # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = await search_employees(employee_name)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {'–Ω–∞–π–¥–µ–Ω' if employee else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if not employee:
            return f"‚ùå <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É '{employee_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –§–ò–û\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        full_name = employee.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        position = employee.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        phone = employee.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        snils = employee.get('snils', '–ù–µ —É–∫–∞–∑–∞–Ω')
        inn = employee.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω')
        birth_date = employee.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        status = employee.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')
        employee_id = employee.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        certificates = employee.get('certificates', [])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        if birth_date and birth_date != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
            try:
                if "T" in str(birth_date):
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(str(birth_date).replace("Z", "+00:00"))
                    formatted_date = date_obj.strftime("%d.%m.%Y")
                elif "." in str(birth_date) and len(str(birth_date).split(".")) == 3:
                    formatted_date = str(birth_date)
                else:
                    formatted_date = str(birth_date)
            except:
                formatted_date = str(birth_date)
        else:
            formatted_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
        certificates_info = await format_certificates_info(certificates)
        
        response = f"""
üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</b>

üë§ <b>–§–ò–û:</b> {full_name}
üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üìÑ <b>–°–ù–ò–õ–°:</b> {snils}
üî¢ <b>–ò–ù–ù:</b> {inn}
üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {formatted_date}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
üÜî <b>ID:</b> {employee_id}

{certificates_info}
"""
        
        print(f"üîç ===== –ö–û–ù–ï–¶ handle_search_request =====")
        return response
        
    except Exception as e:
        print(f"üîç ===== –û–®–ò–ë–ö–ê –≤ handle_search_request: {e} =====")
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {e}"

async def format_certificates_info(certificates):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    
    Args:
        certificates: –°–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
    """
    print(f"üîç –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º {len(certificates)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    if not certificates:
        return "üìú <b>–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:</b> –ù–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π"
    
    from datetime import datetime, timedelta
    
    now = datetime.now()
    expired_certificates = []
    expiring_certificates = []
    valid_certificates = []
    
    for cert in certificates:
        if not isinstance(cert, dict):
            continue
            
        cert_name = cert.get('certificate_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ')
        cert_number = cert.get('certificate_number', '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞')
        assigned_date = cert.get('assigned_date', '')
        expiry_date = cert.get('expiry_date', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if not expiry_date or expiry_date == 'null' or expiry_date == '':
            continue
            
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if "T" in str(expiry_date):
                expiry_dt = datetime.fromisoformat(str(expiry_date).replace("Z", "+00:00"))
            else:
                expiry_dt = datetime.strptime(str(expiry_date), "%Y-%m-%d")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            if expiry_dt < now:
                # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω
                expired_certificates.append({
                    'name': cert_name,
                    'number': cert_number,
                    'expiry_date': expiry_dt.strftime("%d.%m.%Y"),
                    'days_overdue': (now - expiry_dt).days
                })
            elif expiry_dt <= now + timedelta(days=30):
                # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π)
                expiring_certificates.append({
                    'name': cert_name,
                    'number': cert_number,
                    'expiry_date': expiry_dt.strftime("%d.%m.%Y"),
                    'days_remaining': (expiry_dt - now).days
                })
            else:
                # –î–µ–π—Å—Ç–≤—É–µ—Ç
                valid_certificates.append({
                    'name': cert_name,
                    'number': cert_number,
                    'expiry_date': expiry_dt.strftime("%d.%m.%Y"),
                    'days_remaining': (expiry_dt - now).days
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ {cert_name}: {e}")
            continue
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    result = "üìú <b>–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:</b>\n"
    
    if expired_certificates:
        result += "\n‚ùå <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:</b>\n"
        for cert in expired_certificates:
            result += f"‚Ä¢ {cert['name']} ‚Ññ{cert['number']} (–¥–æ {cert['expiry_date']}, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {cert['days_overdue']} –¥–Ω.)\n"
    
    if expiring_certificates:
        result += "\n‚ö†Ô∏è <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:</b>\n"
        for cert in expiring_certificates:
            result += f"‚Ä¢ {cert['name']} ‚Ññ{cert['number']} (–¥–æ {cert['expiry_date']}, –æ—Å—Ç–∞–ª–æ—Å—å {cert['days_remaining']} –¥–Ω.)\n"
    
    if valid_certificates:
        result += "\n‚úÖ <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–µ:</b>\n"
        for cert in valid_certificates:
            result += f"‚Ä¢ {cert['name']} ‚Ññ{cert['number']} (–¥–æ {cert['expiry_date']}, –æ—Å—Ç–∞–ª–æ—Å—å {cert['days_remaining']} –¥–Ω.)\n"
    
    if not expired_certificates and not expiring_certificates and not valid_certificates:
        result += "–ù–µ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è"
    
    return result
