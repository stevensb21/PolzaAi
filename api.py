import os
import json
import asyncio
import requests
from openai import AsyncOpenAI
from datetime import datetime
from dateutil.relativedelta import relativedelta
from dotenv import load_dotenv
from ai_request import make_api_request_with_fallback
from validate import convert_date

load_dotenv()

async def addPeople(employee):
    print(f"üîç –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', ''), employee.get('position', ''), employee.get('phone', ''), employee.get('snils', ''), employee.get('inn', ''), employee.get('birth_date', ''), employee.get( '@'+'photo', '')}")
    data = {
        "full_name": employee.get("full_name", ""),
        "position": employee.get("position", ""),
        "phone": employee.get("phone", ""),
        "snils": employee.get("snils", ""),
        "inn": employee.get("inn", ""),
        "birth_date": await convert_date(employee.get("birth_date", "")) if employee.get("birth_date", "").strip() else "",
        "status": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "photo": employee.get( '@'+'photo', "")
    }
    try:
        response = requests.post(
            os.getenv("BASE_URL") + "/api/people",
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json",
                "User-Agent": "PolzaAI-Bot/1.0",
                "Authorization": f'Bearer {os.getenv("API_TOKEN")}'
            },
            json=data,
            timeout=30,
                proxies={"http": None, "https": None}
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', '')}: {e}")
        return None

    if response.status_code == 200 or response.status_code == 201:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.get('full_name', '')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', '')}: {response.status_code} {response.text}")
        return None

async def UpdatePeople(employee):
    print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', '')}")
    data = {
        "full_name": employee.get("full_name", ""),
        "position": employee.get("position", ""),
        "phone": employee.get("phone", ""),
        "snils": employee.get("snils", ""),
        "inn": employee.get("inn", ""),
        "birth_date": await convert_date(employee.get("birth_date", "")),
        "status": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "photo": employee.get( '@'+'photo', "")
    }
    url = os.getenv("BASE_URL") + "/api/people/" + str(employee.get("id", ""))
    print(f"üåê URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {url}")
    try:
        response = requests.put(
            url,
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json",
                "User-Agent": "PolzaAI-Bot/1.0",
                "Authorization": f'Bearer {os.getenv("API_TOKEN")}'
            },
            json=data,
            timeout=30,
                proxies={"http": None, "https": None}
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', '')}: {e}")
        return None

    if response.status_code == 200 or response.status_code == 201:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {employee.get('full_name', '')} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.get('full_name', '')}: {response.status_code} {response.text}")
        return None

async def getPeople(id):
    try:
        response = requests.get(
            os.getenv("BASE_URL") + "/api/people/" + str(id),
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json",
                "User-Agent": "PolzaAI-Bot/1.0",
                "Authorization": f'Bearer {os.getenv("API_TOKEN")}'
            },
            timeout=30,
                proxies={"http": None, "https": None}
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}: {e}")
        return None
    
    if response.status_code == 200:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}: {response.status_code} {response.text}")
        return None

async def allPeople():

    """–í—ã–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π API —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    try:
        api_token = os.getenv("API_TOKEN")
        
        if not api_token:
            return {
                "error": "API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é API_TOKEN"
            }
        
        headers = {
            'User-Agent': 'PolzaAI-Bot/1.0',
            'Authorization': f'Bearer {api_token}'
        }
        

        resp = requests.get(
            f"{os.getenv('BASE_URL')}/api/people/compact?limit=1000",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç 1000 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª—é–¥–µ–π
            timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            proxies={"http": None, "https": None},
            headers=headers
        )
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–∏–ª–∏
        if resp.status_code == 200:
            data = resp.json()
            if isinstance(data, dict) and 'data' in data:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data['data'])} –∑–∞–ø–∏—Å–µ–π")
                return data['data']
            else:
                return {
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                    "details": f"URL: {os.getenv('BASE_URL')}/api/people/compact?limit=1000",
                    "response_text": resp.text
                }
        else:
            return {
                "error": f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code}",
                "details": f"URL: {os.getenv('BASE_URL')}/api/people/compact?limit=1000",
                "response_text": resp.text
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return None


import re

def normalize_text(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: —É–±–∏—Ä–∞–µ—Ç –í–°–ï –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    if not text:
        return ""
    # –£–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, —Ç–∞–±—ã
    normalized = re.sub(r'\s+', '', str(text).strip())
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return normalized.lower()

def fuzzy_search(query, target_text):
    """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞"""
    if not query or not target_text:
        return False
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
    norm_query = normalize_text(query)
    norm_target = normalize_text(target_text)
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if norm_query == norm_target:
        return True
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    if norm_query in norm_target:
        return True
    
    return False

async def get_employee_certificates(employee_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    
    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ None
    """
    try:
        api_token = os.getenv("API_TOKEN")
        
        if not api_token:
            print("‚ùå API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        headers = {
            'User-Agent': 'PolzaAI-Bot/1.0',
            'Authorization': f'Bearer {api_token}'
        }
        
        resp = requests.get(
            f"{os.getenv('BASE_URL')}/api/people/{employee_id}",
            timeout=30,
            proxies={"http": None, "https": None},
            headers=headers
        )
        
        if resp.status_code == 200:
            data = resp.json()
            if isinstance(data, dict) and 'data' in data:
                employee_data = data['data']
                print(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {list(employee_data.keys())}")
                certificates = employee_data.get('all_certificates', [])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(certificates)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                if not certificates:
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
                    for key in employee_data.keys():
                        if 'certificate' in key.lower() or '—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ' in key.lower():
                            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ {key}: {employee_data[key]}")
                
                return certificates
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")
                print(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {data}")
                return []
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {resp.status_code}")
            print(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {resp.text}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        return []

async def search_employees(query):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–§–ò–û, —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏ —Ç.–¥.)
    
    Returns:
        dict: –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–ª–∏ None
    """
    print(f"üîç search_employees –≤—ã–∑–≤–∞–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
    if not query or not query.strip():
        print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return None
    
    try:
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        employees = await allPeople()
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(employees) if employees else 0} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
       
        
        if not employees or isinstance(employees, dict) and 'error' in employees:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {employees}")
            return None
      
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        for i, employee in enumerate(employees):
            if not isinstance(employee, dict) or 'full_name' not in employee:
                continue
            
            employee_name = employee.get('full_name', '')
            
            if fuzzy_search(query, employee_name):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee_id = employee.get('id')
                certificates = []
                if employee_id:
                    print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è ID: {employee_id}")
                    certificates = await get_employee_certificates(employee_id)
                    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {len(certificates)}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è + —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                filtered_employee = {
                    'id': employee.get('id'),
                    'full_name': employee.get('full_name'),
                    'position': employee.get('position'),
                    'phone': employee.get('phone'),
                    'status': employee.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'snils': employee.get('snils'),
                    'inn': employee.get('inn'),
                    'birth_date': employee.get('birth_date'),
                    'photo': employee.get('photo'),
                    'certificates': certificates
                }
                return filtered_employee
        
       
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return None


async def main():
    employees = await search_employees("John Doe")
    print(employees)

# async def main():
#     employee = {
#         "full_name": "John Doe",
#         "position": "Developer",
#         "phone": "1234567890",
#         "snils": "1234567890",
#         "inn": "1234567890",
#         "birth_date": "2000-01-01"
#     }
#     result = await addPeople(employee)
#     print(result)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
#     if result and isinstance(result, dict) and result.get("success") and "data" in result:
#         user_id = result["data"].get("id")
#         print(f"üìã ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
#         employee = await getPeople(user_id)
#         print(employee)
#         if employee and isinstance(employee, dict) and employee.get("success") and "data" in employee:
#             # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
#             user_data = employee["data"]
#             user_data["position"] = "Engineer"
#             update_result = await UpdatePeople(user_data)
#             print(update_result)
#         else:
#             print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#         employee = await getPeople(user_id)
#         print(employee)
#     else:
#         print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω ID")

if __name__ == "__main__":
    asyncio.run(main())