import asyncio
import logging
import telebot
from ceo import ceo_dispatcher
from dotenv import load_dotenv
import os
import time
import fcntl
import sys
from logger import bot as bot_log, debug, info, error, critical, log_function_entry, log_function_exit
from generateDocx import create_tetracom_document

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    lock_file = '/tmp/polzaai_bot.lock'
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_fd = os.open(lock_file, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
        fcntl.flock(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º PID
        os.write(lock_fd, str(os.getpid()).encode())
        os.close(lock_fd)
        
        info("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except (OSError, IOError):
        error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        sys.exit(1)

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏
# –§–æ—Ä–º–∞—Ç: {user_id: {"name": "–ò–º—è", "chat_id": chat_id}}
notification_users = {
    "8316311496": {"name": "–õ–∞—Ä–∏—Å–∞", "chat_id": "8316311496"},
    "1174287803": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1174287803", "chat_id": "1174287803"}, 
    "1048507963": {"name": "–§–∞—Ä–∏—Ç", "chat_id": "1048507963"}
}

def add_notification_user(user_id, name, chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
    notification_users[user_id] = {
        "name": name,
        "chat_id": chat_id
    }
    info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {name} (ID: {user_id}, Chat: {chat_id})")

def remove_notification_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if user_id in notification_users:
        user_info = notification_users.pop(user_id)
        info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_info['name']} (ID: {user_id})")

async def get_certificate_details(certificate_names):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –∏–∑ API"""
    try:
        import requests
        from pull_order import BASE_URL
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        api_token = os.getenv("API_TOKEN")
        debug(f"API_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {api_token[:10] if api_token else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
        debug(f"–ü–æ–ª–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(api_token) if api_token else 0}")
        
        if not api_token:
            error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return [{"name": name, "description": "–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"} for name in certificate_names]
        
        response = requests.get(
            f"{BASE_URL}/api/certificates",
            timeout=30,
            proxies={"http": None, "https": None},
            headers={
                'User-Agent': 'PolzaAI-Bot/1.0',
                'Authorization': f'Bearer {api_token}'
            }
        )
        
        if response.status_code == 200:
            try:
                certificates_data = response.json()
                info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {type(certificates_data)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if isinstance(certificates_data, list):
                    certs_list = certificates_data
                elif isinstance(certificates_data, dict) and "data" in certificates_data:
                    certs_list = certificates_data["data"]
                else:
                    info(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {certificates_data}")
                    return [{"name": name, "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} for name in certificate_names]
                
                certificate_details = []
                
                for cert_name in certificate_names:
                    # –ò—â–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                    found = False
                    for cert in certs_list:
                        if isinstance(cert, dict) and cert.get("name", "").lower() == cert_name.lower():
                            certificate_details.append({
                                "name": cert.get("name", cert_name),
                                "description": cert.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            })
                            found = True
                            break
                    
                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                    if not found:
                        for cert in certs_list:
                            if isinstance(cert, dict):
                                cert_name_lower = cert_name.lower()
                                cert_db_name_lower = cert.get("name", "").lower()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                if (cert_name_lower in cert_db_name_lower or 
                                    cert_db_name_lower in cert_name_lower or
                                    any(word in cert_db_name_lower for word in cert_name_lower.split() if len(word) > 2)):
                                    
                            certificate_details.append({
                                "name": cert.get("name", cert_name),
                                "description": cert.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            })
                            found = True
                            break
                    
                    if not found:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å –±–∞–∑–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        certificate_details.append({
                            "name": cert_name,
                            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        })
                
                return certificate_details
                
            except Exception as e:
                error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
                return [{"name": name, "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} for name in certificate_names]
        else:
            info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {response.status_code}")
            return [{"name": name, "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} for name in certificate_names]
            
    except Exception as e:
        error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        return [{"name": name, "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} for name in certificate_names]

async def send_ready_order_notification(order_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        info(f"üöÄ –í–•–û–î –í send_ready_order_notification –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {order_data.get('employee', {}).get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_data}")
        employee = order_data.get("employee", {})
        employee_name = employee.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        employee_photo = employee.get("photo")
        info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}, —Ñ–æ—Ç–æ: {employee_photo}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
        certificate_names = order_data.get("certificate", [])
        certificate_details = await get_certificate_details(certificate_names)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        birth_date = employee.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        if birth_date != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" and birth_date and birth_date != "null":
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ DD.MM.YYYY
            try:
                from datetime import datetime
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 000000Z (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞)
                if str(birth_date).endswith("000000Z") or "000000" in str(birth_date):
                    birth_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                elif "T" in birth_date:
                    birth_date = birth_date.split("T")[0]
                date_obj = datetime.strptime(birth_date, "%Y-%m-%d")
                birth_date = date_obj.strftime("%d.%m.%Y")
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                pass
            except Exception as e:
                debug(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {birth_date}: {e}")
                birth_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            birth_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        certificates_text = ""
        for cert in certificate_details:
            certificates_text += f"‚Ä¢ {cert['name']} - {cert['description']}\n"
        
        message_text = f"""–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
 –¥–ª—è {employee_name} 
 —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è–º–∏:
{certificates_text}
 –°–ù–ò–õ–°: {employee.get("snils", "–ù–µ —É–∫–∞–∑–∞–Ω")} 
 –ò–ù–ù: {employee.get("inn", "–ù–µ —É–∫–∞–∑–∞–Ω")} 
 –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.get("position", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")} 
 –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date} 
 –¢–µ–ª–µ—Ñ–æ–Ω: {employee.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_users}")
        info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notification_users)}")
        debug(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {list(notification_users.keys())}")
        
        for user_id, user_info in notification_users.items():
            try:
                chat_id = user_info["chat_id"]
                user_name = user_info["name"]
                info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {user_id}, chat_id: {chat_id})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(chat_id, message_text, parse_mode="Markdown")
                info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if employee_photo and employee_photo != "null":
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ photo –ø–æ–ª–Ω—ã–º URL
                        if employee_photo.startswith('http'):
                            # –≠—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL
                            photo_url = employee_photo
                        else:
                            # –≠—Ç–æ file_id –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                                file_info = bot.get_file(employee_photo)
                                photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
                            except:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_info, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ file_id
                                try:
                                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ file_id
                                    file_info = bot.get_file(employee_photo)
                                    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
                                except:
                                    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ
                                    info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ñ–æ—Ç–æ {employee_photo}")
                                    continue
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                        import requests
                        photo_response = requests.get(photo_url, timeout=10)
                        if photo_response.status_code == 200:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                            bot.send_photo(chat_id, photo_response.content, 
                                         caption=f"–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")
                            info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_name}")
                        else:
                            info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {user_name}: {photo_response.status_code}")
                    except Exception as e:
                        error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name}: {e}")
                
                info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {user_id})")
                
            except Exception as e:
                error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info['name']}: {e}")
        
        info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ –¥–ª—è {employee_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(notification_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Word
        try:
            info("–°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Word...")
            create_tetracom_document(order_data, certificate_details)
            info("–î–æ–∫—É–º–µ–Ω—Ç Word —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            from generateDocx import generate_filename
            filename = generate_filename(order_data, certificate_details)
            
            for user_id, user_info in notification_users.items():
                try:
                    chat_id = user_info["chat_id"]
                    user_name = user_info["name"]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    with open(filename, 'rb') as doc_file:
                        bot.send_document(chat_id, doc_file, 
                                        caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞: {employee_name}")
                    info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                    
                except Exception as e:
                    error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info['name']}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(filename)
                info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω")
            except:
                pass
                
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
    except Exception as e:
        error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

async def send_existing_certificate_notification(order_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        info(f"üöÄ –í–•–û–î –í send_existing_certificate_notification –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {order_data.get('employee', {}).get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_data}")
        employee = order_data.get("employee", {})
        employee_name = employee.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        employee_photo = employee.get("photo")
        info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}, —Ñ–æ—Ç–æ: {employee_photo}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
        certificate_names = order_data.get("certificate", [])
        certificate_details = await get_certificate_details(certificate_names)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
        birth_date = employee.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        if birth_date != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" and birth_date and birth_date != "null":
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (1974-12-20T00:00:00.000000Z)
                if "T" in str(birth_date):
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(str(birth_date).replace("Z", "+00:00"))
                    formatted_date = date_obj.strftime("%d.%m.%Y")
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 000000Z (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞)
                elif str(birth_date).endswith("000000Z"):
                    formatted_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    formatted_date = str(birth_date)
            except Exception as e:
                debug(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {birth_date}: {e}")
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω—É–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
                if "000000" in str(birth_date) or str(birth_date).strip() == "":
                    formatted_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    formatted_date = str(birth_date)
        else:
            formatted_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        certificate_list = []
        for cert in certificate_details:
            cert_name = cert.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            cert_description = cert.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            certificate_list.append(f"‚Ä¢ {cert_name} - {cert_description}")
        
        certificates_text = "\n".join(certificate_list)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"""‚ö†Ô∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö**

–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ **{employee_name}** —É–∂–µ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:
{certificates_text}

**–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:**
–°–ù–ò–õ–°: {employee.get('snils', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ò–ù–ù: {employee.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {formatted_date}
–¢–µ–ª–µ—Ñ–æ–Ω: {employee.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

*–î–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.*"""

        info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_users}")
        info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notification_users)}")
        debug(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {list(notification_users.keys())}")
        
        for user_id, user_info in notification_users.items():
            try:
                chat_id = user_info["chat_id"]
                user_name = user_info["name"]
                info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {user_id}, chat_id: {chat_id})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(chat_id, message_text, parse_mode="Markdown")
                info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if employee_photo and employee_photo != "null":
                    try:
                        import requests
                        photo_response = requests.get(employee_photo)
                        if photo_response.status_code == 200:
                            bot.send_photo(chat_id, photo_response.content, 
                                         caption=f"üì∏ –§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")
                            info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_name}")
                    except Exception as e:
                        error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {user_name}: {e}")
                
                info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {user_id})")
                
            except Exception as e:
                error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info['name']}: {e}")
        
        info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –¥–ª—è {employee_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(notification_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except Exception as e:
        error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.reply_to(message, 
        "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏!**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ `/subscribe` - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n"
        "‚Ä¢ `/unsubscribe` - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ `/notifications` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `/exit` - –í—ã—Ö–æ–¥\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏!",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    bot.reply_to(message,
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        "2. –Ø –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏ –µ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è—Ö\n"
        "3. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ:\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n"
        "   - –ò–ª–∏ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "4. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit"
    )

@bot.message_handler(commands=['exit'])
def exit_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit"""
    bot.reply_to(message, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")

@bot.message_handler(commands=['subscribe'])
def subscribe_command(message):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    add_notification_user(user_id, user_name, chat_id)
    bot.reply_to(message, f"‚úÖ {user_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!")

@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_command(message):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    remove_notification_user(user_id)
    bot.reply_to(message, f"‚ùå {user_name}, –≤—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!")

@bot.message_handler(commands=['notifications'])
def notifications_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not notification_users:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    text = "üìã **–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n\n"
    for user_id, user_info in notification_users.items():
        text += f"üë§ {user_info['name']} (ID: {user_id})\n"
    
    bot.reply_to(message, text, parse_mode="Markdown")

@bot.message_handler(content_types=['photo'])
def handle_photo_with_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º"""
    log_function_entry("handle_photo_with_text", args=(message.photo, message.caption))
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        file_info = None
        
        for attempt in range(max_retries):
            try:
                file_info = bot.get_file(file_id)
                break
            except Exception as e:
                if attempt < max_retries - 1:
                    info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä—è—é...")
                    time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    raise e
        
        if not file_info:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        try:
            import requests
            test_response = requests.head(file_url, timeout=5)
            if test_response.status_code != 200:
                info(f"URL —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id: {file_id}")
                file_url = file_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –∫–∞–∫ fallback
        except Exception as e:
            info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id: {e}")
            file_url = file_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –∫–∞–∫ fallback
        
        info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {file_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
        text_content = message.caption or ""
        
        if text_content:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–∫–∞–∑ —Å —Ñ–æ—Ç–æ
            info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ñ–æ—Ç–æ: {text_content}")
            
            # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            async def process_photo_order():
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ceo_dispatcher
                    messages = [
                        {
                            "role": "user", 
                            "content": text_content,
                            "photo": file_url
                        }
                    ]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ceo_dispatcher
                    result = await ceo_dispatcher(messages)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    bot.reply_to(message, result)
                    
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ: {str(e)}"
                    error(error_msg)
                    bot.reply_to(message, error_msg)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(process_photo_order())
            finally:
                loop.close()
            
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            global last_photo_url
            last_photo_url = file_url
            bot.reply_to(message, f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! URL: {file_url}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.")
        
        log_function_exit("handle_photo_with_text", result="–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}"
        error(error_msg)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "ConnectionResetError" in str(e) or "Connection aborted" in str(e):
            user_msg = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        elif "timeout" in str(e).lower():
            user_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
        else:
            user_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}"
        
        bot.reply_to(message, user_msg)
        log_function_exit("handle_photo_with_text", error=error_msg)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ URL —Ñ–æ—Ç–æ
last_photo_url = None

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    log_function_entry("handle_message", args=(message.text,))
    
    user_message = message.text
    processing_msg = None
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_msg = bot.reply_to(message, "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async def process_request():
            try:
                # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ceo_dispatcher
                messages = [
                    {"role": "user", "content": user_message}
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                global last_photo_url
                if last_photo_url:
                    messages[0]["photo"] = last_photo_url
                    info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_photo_url}")
                    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    last_photo_url = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ceo_dispatcher
                result = await ceo_dispatcher(messages)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                bot.edit_message_text(
                    result,
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ process_request: {str(e)}"
                error(error_msg)
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    bot.edit_message_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                        chat_id=processing_msg.chat.id,
                        message_id=processing_msg.message_id
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(process_request())
        
        log_function_exit("handle_message", result="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        error(error_msg)
        log_function_exit("handle_message", error=error_msg)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if processing_msg:
                bot.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
            else:
                bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        except Exception as send_error:
            error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(send_error)}")

@bot.message_handler(commands=['reset'])
def reset_chat(message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    log_function_entry("reset_chat", args=(message.text,))
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ceo_dispatcher
        messages = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ceo_dispatcher
        asyncio.run(ceo_dispatcher(messages, []))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.reply_to(message, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        
        log_function_exit("reset_chat", result="–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}"
        error(error_msg)
        log_function_exit("reset_chat", error=error_msg)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    log_function_entry("main")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
    check_single_instance()
    
    max_retries = 5
    retry_delay = 5  # —Å–µ–∫—É–Ω–¥
    
    for attempt in range(max_retries):
        try:
            if attempt > 0:
                info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt}/{max_retries}")
                time.sleep(retry_delay)
            
            print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            try:
                bot.remove_webhook()
                info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                info(f"‚ÑπÔ∏è Webhook –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω: {e}")
            bot.polling(
                none_stop=True,
                interval=1,
                timeout=20,
                long_polling_timeout=20
            )
            
            log_function_exit("main", result="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            break
            
        except (ConnectionError, ConnectionResetError, ConnectionAbortedError) as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}"
            error(error_msg)
            
            if attempt == max_retries - 1:
                critical("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                log_function_exit("main", error="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                break
            else:
                info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}"
            error(error_msg)
            
            if attempt == max_retries - 1:
                critical("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                log_function_exit("main", error=error_msg)
                break
            else:
                info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")

if __name__ == '__main__':
    main()
